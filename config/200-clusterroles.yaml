# Copyright 2022 TriggerMesh Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: triggermesh-controller
  labels:
    app.kubernetes.io/part-of: triggermesh

rules:

# Record Kubernetes events
- apiGroups:
  - ''
  resources:
  - events
  verbs:
  - create
  - patch
  - update

# Manage receive-adapters
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - serving.knative.dev
  resources:
  - services
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch

# Read reconciled TriggerMesh resources and update their statuses
# +rbac-check
- apiGroups:
  - sources.triggermesh.io
  resources:
  - awssqssources
  verbs:
  - list
  - watch
  - get
# +rbac-check:subresource=status
- apiGroups:
  - sources.triggermesh.io
  resources:
  - awssqssources/status
  verbs:
  - update

# Ensure compatibility with the OwnerReferencesPermissionEnforcement Admission Controller
# https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
# +rbac-check:subresource=finalizers
- apiGroups:
  - sources.triggermesh.io
  resources:
  - awssqssources/finalizers
  verbs:
  - update

# Set finalizers
- apiGroups:
  - sources.triggermesh.io
  resources:
  - awssqsources

  verbs:
  - patch

# Manage resource-specific ServiceAccounts and RoleBindings
- apiGroups:
  - ''
  resources:
  - serviceaccounts
  - serviceaccounts/finalizers
  verbs:
  - list
  - watch
  - create
  - update
  - delete
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  verbs:
  - list
  - watch
  - create
# Read credentials
- apiGroups:
  - ''
  resources:
  - secrets
  verbs:
  - get

# Required by Function controller to store, and mount user's code
- apiGroups:
  - ''
  resources:
  - configmaps
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch

# Read controller configurations
- apiGroups:
  - ''
  resources:
  - configmaps
  verbs:
  - list
  - watch
- apiGroups:
  - ''
  resources:
  - configmaps
  resourceNames:
  - config-logging
  - config-observability
  - config-leader-election
  verbs:
  - get

# Acquire leases for leader election
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - create
  - update

# Observe status of Pods and their ancestors
- apiGroups:
  - ''
  resources:
  - pods
  verbs:
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - list
  - watch

---

# This role is used to grant receive adapters read-only access to per-component
# configurations such as logging, observability and tracing.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: triggermesh-config-watcher
  labels:
    app.kubernetes.io/part-of: triggermesh
rules:
- apiGroups:
  - ''
  resources:
  - configmaps
  verbs:
  - list
  - watch
  - get

---

# This role provides readonly access to "Source" duck types.
# All the rules it contains get aggregated into the "source-observer" ClusterRole provided by Knative Eventing.
# see https://github.com/knative/eventing/blob/release-0.26/docs/spec/sources.md#source-rbac
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: triggermesh-source-observer
  labels:
    app.kubernetes.io/part-of: triggermesh
    duck.knative.dev/source: 'true'
rules:
# +rbac-check
- apiGroups:
  - sources.triggermesh.io
  resources:
  - awssqssources
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - sources.triggermesh.io
  resources:
  - awssqssources/finalizers
  verbs:
  - update

---

# This aggregated role grants read-only access to Addressables.
# It is intended mainly to allow sink resolvers to resolve URLs from object references.
#
# NOTE: This same role can also be found in Knative Eventing. It is duplicated here to allow running TriggerMesh in a
# cluster which doesn't have Knative Eventing deployed.
# Source:
#   https://github.com/knative/eventing/blob/knative-v1.1.0/config/core/roles/addressable-resolvers-clusterrole.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: addressable-resolver
  labels:
    app.kubernetes.io/part-of: triggermesh
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      duck.knative.dev/addressable: 'true'
rules: []  # Rules are automatically filled in by the Kubernetes controller manager.

---

# This role provides readonly access to "Addressable" duck types.
# All the rules it contains get aggregated into the "addressable-resolver" ClusterRole.
# https://github.com/knative/eventing/blob/release-0.26/config/core/roles/addressable-resolvers-clusterrole.yaml#L15-L28
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: triggermesh-addressable-resolver
  labels:
    app.kubernetes.io/part-of: triggermesh
    duck.knative.dev/addressable: 'true'
rules:
# Allow resolving URLs of a few additional common types which are not supplied by TriggerMesh.
- apiGroups:
  - ''
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - routes
  - services
  verbs:
  - get
  - list
  - watch
