/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GoogleCloudWorkflowsTargetLister helps list GoogleCloudWorkflowsTargets.
// All objects returned here must be treated as read-only.
type GoogleCloudWorkflowsTargetLister interface {
	// List lists all GoogleCloudWorkflowsTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudWorkflowsTarget, err error)
	// GoogleCloudWorkflowsTargets returns an object that can list and get GoogleCloudWorkflowsTargets.
	GoogleCloudWorkflowsTargets(namespace string) GoogleCloudWorkflowsTargetNamespaceLister
	GoogleCloudWorkflowsTargetListerExpansion
}

// googleCloudWorkflowsTargetLister implements the GoogleCloudWorkflowsTargetLister interface.
type googleCloudWorkflowsTargetLister struct {
	indexer cache.Indexer
}

// NewGoogleCloudWorkflowsTargetLister returns a new GoogleCloudWorkflowsTargetLister.
func NewGoogleCloudWorkflowsTargetLister(indexer cache.Indexer) GoogleCloudWorkflowsTargetLister {
	return &googleCloudWorkflowsTargetLister{indexer: indexer}
}

// List lists all GoogleCloudWorkflowsTargets in the indexer.
func (s *googleCloudWorkflowsTargetLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudWorkflowsTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudWorkflowsTarget))
	})
	return ret, err
}

// GoogleCloudWorkflowsTargets returns an object that can list and get GoogleCloudWorkflowsTargets.
func (s *googleCloudWorkflowsTargetLister) GoogleCloudWorkflowsTargets(namespace string) GoogleCloudWorkflowsTargetNamespaceLister {
	return googleCloudWorkflowsTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GoogleCloudWorkflowsTargetNamespaceLister helps list and get GoogleCloudWorkflowsTargets.
// All objects returned here must be treated as read-only.
type GoogleCloudWorkflowsTargetNamespaceLister interface {
	// List lists all GoogleCloudWorkflowsTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudWorkflowsTarget, err error)
	// Get retrieves the GoogleCloudWorkflowsTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GoogleCloudWorkflowsTarget, error)
	GoogleCloudWorkflowsTargetNamespaceListerExpansion
}

// googleCloudWorkflowsTargetNamespaceLister implements the GoogleCloudWorkflowsTargetNamespaceLister
// interface.
type googleCloudWorkflowsTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GoogleCloudWorkflowsTargets in the indexer for a given namespace.
func (s googleCloudWorkflowsTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudWorkflowsTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudWorkflowsTarget))
	})
	return ret, err
}

// Get retrieves the GoogleCloudWorkflowsTarget from the indexer for a given namespace and name.
func (s googleCloudWorkflowsTargetNamespaceLister) Get(name string) (*v1alpha1.GoogleCloudWorkflowsTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("googlecloudworkflowstarget"), name)
	}
	return obj.(*v1alpha1.GoogleCloudWorkflowsTarget), nil
}
