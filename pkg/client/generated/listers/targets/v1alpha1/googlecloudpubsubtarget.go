/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GoogleCloudPubSubTargetLister helps list GoogleCloudPubSubTargets.
// All objects returned here must be treated as read-only.
type GoogleCloudPubSubTargetLister interface {
	// List lists all GoogleCloudPubSubTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudPubSubTarget, err error)
	// GoogleCloudPubSubTargets returns an object that can list and get GoogleCloudPubSubTargets.
	GoogleCloudPubSubTargets(namespace string) GoogleCloudPubSubTargetNamespaceLister
	GoogleCloudPubSubTargetListerExpansion
}

// googleCloudPubSubTargetLister implements the GoogleCloudPubSubTargetLister interface.
type googleCloudPubSubTargetLister struct {
	indexer cache.Indexer
}

// NewGoogleCloudPubSubTargetLister returns a new GoogleCloudPubSubTargetLister.
func NewGoogleCloudPubSubTargetLister(indexer cache.Indexer) GoogleCloudPubSubTargetLister {
	return &googleCloudPubSubTargetLister{indexer: indexer}
}

// List lists all GoogleCloudPubSubTargets in the indexer.
func (s *googleCloudPubSubTargetLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudPubSubTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudPubSubTarget))
	})
	return ret, err
}

// GoogleCloudPubSubTargets returns an object that can list and get GoogleCloudPubSubTargets.
func (s *googleCloudPubSubTargetLister) GoogleCloudPubSubTargets(namespace string) GoogleCloudPubSubTargetNamespaceLister {
	return googleCloudPubSubTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GoogleCloudPubSubTargetNamespaceLister helps list and get GoogleCloudPubSubTargets.
// All objects returned here must be treated as read-only.
type GoogleCloudPubSubTargetNamespaceLister interface {
	// List lists all GoogleCloudPubSubTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudPubSubTarget, err error)
	// Get retrieves the GoogleCloudPubSubTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GoogleCloudPubSubTarget, error)
	GoogleCloudPubSubTargetNamespaceListerExpansion
}

// googleCloudPubSubTargetNamespaceLister implements the GoogleCloudPubSubTargetNamespaceLister
// interface.
type googleCloudPubSubTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GoogleCloudPubSubTargets in the indexer for a given namespace.
func (s googleCloudPubSubTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudPubSubTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudPubSubTarget))
	})
	return ret, err
}

// Get retrieves the GoogleCloudPubSubTarget from the indexer for a given namespace and name.
func (s googleCloudPubSubTargetNamespaceLister) Get(name string) (*v1alpha1.GoogleCloudPubSubTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("googlecloudpubsubtarget"), name)
	}
	return obj.(*v1alpha1.GoogleCloudPubSubTarget), nil
}
