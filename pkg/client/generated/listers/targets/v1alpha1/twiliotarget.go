/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TwilioTargetLister helps list TwilioTargets.
// All objects returned here must be treated as read-only.
type TwilioTargetLister interface {
	// List lists all TwilioTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TwilioTarget, err error)
	// TwilioTargets returns an object that can list and get TwilioTargets.
	TwilioTargets(namespace string) TwilioTargetNamespaceLister
	TwilioTargetListerExpansion
}

// twilioTargetLister implements the TwilioTargetLister interface.
type twilioTargetLister struct {
	indexer cache.Indexer
}

// NewTwilioTargetLister returns a new TwilioTargetLister.
func NewTwilioTargetLister(indexer cache.Indexer) TwilioTargetLister {
	return &twilioTargetLister{indexer: indexer}
}

// List lists all TwilioTargets in the indexer.
func (s *twilioTargetLister) List(selector labels.Selector) (ret []*v1alpha1.TwilioTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TwilioTarget))
	})
	return ret, err
}

// TwilioTargets returns an object that can list and get TwilioTargets.
func (s *twilioTargetLister) TwilioTargets(namespace string) TwilioTargetNamespaceLister {
	return twilioTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TwilioTargetNamespaceLister helps list and get TwilioTargets.
// All objects returned here must be treated as read-only.
type TwilioTargetNamespaceLister interface {
	// List lists all TwilioTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TwilioTarget, err error)
	// Get retrieves the TwilioTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TwilioTarget, error)
	TwilioTargetNamespaceListerExpansion
}

// twilioTargetNamespaceLister implements the TwilioTargetNamespaceLister
// interface.
type twilioTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TwilioTargets in the indexer for a given namespace.
func (s twilioTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TwilioTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TwilioTarget))
	})
	return ret, err
}

// Get retrieves the TwilioTarget from the indexer for a given namespace and name.
func (s twilioTargetNamespaceLister) Get(name string) (*v1alpha1.TwilioTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("twiliotarget"), name)
	}
	return obj.(*v1alpha1.TwilioTarget), nil
}
