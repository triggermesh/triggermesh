/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSS3TargetLister helps list AWSS3Targets.
// All objects returned here must be treated as read-only.
type AWSS3TargetLister interface {
	// List lists all AWSS3Targets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSS3Target, err error)
	// AWSS3Targets returns an object that can list and get AWSS3Targets.
	AWSS3Targets(namespace string) AWSS3TargetNamespaceLister
	AWSS3TargetListerExpansion
}

// aWSS3TargetLister implements the AWSS3TargetLister interface.
type aWSS3TargetLister struct {
	indexer cache.Indexer
}

// NewAWSS3TargetLister returns a new AWSS3TargetLister.
func NewAWSS3TargetLister(indexer cache.Indexer) AWSS3TargetLister {
	return &aWSS3TargetLister{indexer: indexer}
}

// List lists all AWSS3Targets in the indexer.
func (s *aWSS3TargetLister) List(selector labels.Selector) (ret []*v1alpha1.AWSS3Target, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSS3Target))
	})
	return ret, err
}

// AWSS3Targets returns an object that can list and get AWSS3Targets.
func (s *aWSS3TargetLister) AWSS3Targets(namespace string) AWSS3TargetNamespaceLister {
	return aWSS3TargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSS3TargetNamespaceLister helps list and get AWSS3Targets.
// All objects returned here must be treated as read-only.
type AWSS3TargetNamespaceLister interface {
	// List lists all AWSS3Targets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSS3Target, err error)
	// Get retrieves the AWSS3Target from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSS3Target, error)
	AWSS3TargetNamespaceListerExpansion
}

// aWSS3TargetNamespaceLister implements the AWSS3TargetNamespaceLister
// interface.
type aWSS3TargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSS3Targets in the indexer for a given namespace.
func (s aWSS3TargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSS3Target, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSS3Target))
	})
	return ret, err
}

// Get retrieves the AWSS3Target from the indexer for a given namespace and name.
func (s aWSS3TargetNamespaceLister) Get(name string) (*v1alpha1.AWSS3Target, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awss3target"), name)
	}
	return obj.(*v1alpha1.AWSS3Target), nil
}
