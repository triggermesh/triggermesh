/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SlackTargetLister helps list SlackTargets.
// All objects returned here must be treated as read-only.
type SlackTargetLister interface {
	// List lists all SlackTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SlackTarget, err error)
	// SlackTargets returns an object that can list and get SlackTargets.
	SlackTargets(namespace string) SlackTargetNamespaceLister
	SlackTargetListerExpansion
}

// slackTargetLister implements the SlackTargetLister interface.
type slackTargetLister struct {
	indexer cache.Indexer
}

// NewSlackTargetLister returns a new SlackTargetLister.
func NewSlackTargetLister(indexer cache.Indexer) SlackTargetLister {
	return &slackTargetLister{indexer: indexer}
}

// List lists all SlackTargets in the indexer.
func (s *slackTargetLister) List(selector labels.Selector) (ret []*v1alpha1.SlackTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SlackTarget))
	})
	return ret, err
}

// SlackTargets returns an object that can list and get SlackTargets.
func (s *slackTargetLister) SlackTargets(namespace string) SlackTargetNamespaceLister {
	return slackTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SlackTargetNamespaceLister helps list and get SlackTargets.
// All objects returned here must be treated as read-only.
type SlackTargetNamespaceLister interface {
	// List lists all SlackTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SlackTarget, err error)
	// Get retrieves the SlackTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SlackTarget, error)
	SlackTargetNamespaceListerExpansion
}

// slackTargetNamespaceLister implements the SlackTargetNamespaceLister
// interface.
type slackTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SlackTargets in the indexer for a given namespace.
func (s slackTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SlackTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SlackTarget))
	})
	return ret, err
}

// Get retrieves the SlackTarget from the indexer for a given namespace and name.
func (s slackTargetNamespaceLister) Get(name string) (*v1alpha1.SlackTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("slacktarget"), name)
	}
	return obj.(*v1alpha1.SlackTarget), nil
}
