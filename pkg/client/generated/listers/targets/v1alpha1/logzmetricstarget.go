/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogzMetricsTargetLister helps list LogzMetricsTargets.
// All objects returned here must be treated as read-only.
type LogzMetricsTargetLister interface {
	// List lists all LogzMetricsTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogzMetricsTarget, err error)
	// LogzMetricsTargets returns an object that can list and get LogzMetricsTargets.
	LogzMetricsTargets(namespace string) LogzMetricsTargetNamespaceLister
	LogzMetricsTargetListerExpansion
}

// logzMetricsTargetLister implements the LogzMetricsTargetLister interface.
type logzMetricsTargetLister struct {
	indexer cache.Indexer
}

// NewLogzMetricsTargetLister returns a new LogzMetricsTargetLister.
func NewLogzMetricsTargetLister(indexer cache.Indexer) LogzMetricsTargetLister {
	return &logzMetricsTargetLister{indexer: indexer}
}

// List lists all LogzMetricsTargets in the indexer.
func (s *logzMetricsTargetLister) List(selector labels.Selector) (ret []*v1alpha1.LogzMetricsTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogzMetricsTarget))
	})
	return ret, err
}

// LogzMetricsTargets returns an object that can list and get LogzMetricsTargets.
func (s *logzMetricsTargetLister) LogzMetricsTargets(namespace string) LogzMetricsTargetNamespaceLister {
	return logzMetricsTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogzMetricsTargetNamespaceLister helps list and get LogzMetricsTargets.
// All objects returned here must be treated as read-only.
type LogzMetricsTargetNamespaceLister interface {
	// List lists all LogzMetricsTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogzMetricsTarget, err error)
	// Get retrieves the LogzMetricsTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogzMetricsTarget, error)
	LogzMetricsTargetNamespaceListerExpansion
}

// logzMetricsTargetNamespaceLister implements the LogzMetricsTargetNamespaceLister
// interface.
type logzMetricsTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogzMetricsTargets in the indexer for a given namespace.
func (s logzMetricsTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogzMetricsTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogzMetricsTarget))
	})
	return ret, err
}

// Get retrieves the LogzMetricsTarget from the indexer for a given namespace and name.
func (s logzMetricsTargetNamespaceLister) Get(name string) (*v1alpha1.LogzMetricsTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logzmetricstarget"), name)
	}
	return obj.(*v1alpha1.LogzMetricsTarget), nil
}
