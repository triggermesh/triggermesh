/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureServiceBusTargetLister helps list AzureServiceBusTargets.
// All objects returned here must be treated as read-only.
type AzureServiceBusTargetLister interface {
	// List lists all AzureServiceBusTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureServiceBusTarget, err error)
	// AzureServiceBusTargets returns an object that can list and get AzureServiceBusTargets.
	AzureServiceBusTargets(namespace string) AzureServiceBusTargetNamespaceLister
	AzureServiceBusTargetListerExpansion
}

// azureServiceBusTargetLister implements the AzureServiceBusTargetLister interface.
type azureServiceBusTargetLister struct {
	indexer cache.Indexer
}

// NewAzureServiceBusTargetLister returns a new AzureServiceBusTargetLister.
func NewAzureServiceBusTargetLister(indexer cache.Indexer) AzureServiceBusTargetLister {
	return &azureServiceBusTargetLister{indexer: indexer}
}

// List lists all AzureServiceBusTargets in the indexer.
func (s *azureServiceBusTargetLister) List(selector labels.Selector) (ret []*v1alpha1.AzureServiceBusTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureServiceBusTarget))
	})
	return ret, err
}

// AzureServiceBusTargets returns an object that can list and get AzureServiceBusTargets.
func (s *azureServiceBusTargetLister) AzureServiceBusTargets(namespace string) AzureServiceBusTargetNamespaceLister {
	return azureServiceBusTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureServiceBusTargetNamespaceLister helps list and get AzureServiceBusTargets.
// All objects returned here must be treated as read-only.
type AzureServiceBusTargetNamespaceLister interface {
	// List lists all AzureServiceBusTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureServiceBusTarget, err error)
	// Get retrieves the AzureServiceBusTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzureServiceBusTarget, error)
	AzureServiceBusTargetNamespaceListerExpansion
}

// azureServiceBusTargetNamespaceLister implements the AzureServiceBusTargetNamespaceLister
// interface.
type azureServiceBusTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureServiceBusTargets in the indexer for a given namespace.
func (s azureServiceBusTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureServiceBusTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureServiceBusTarget))
	})
	return ret, err
}

// Get retrieves the AzureServiceBusTarget from the indexer for a given namespace and name.
func (s azureServiceBusTargetNamespaceLister) Get(name string) (*v1alpha1.AzureServiceBusTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azureservicebustarget"), name)
	}
	return obj.(*v1alpha1.AzureServiceBusTarget), nil
}
