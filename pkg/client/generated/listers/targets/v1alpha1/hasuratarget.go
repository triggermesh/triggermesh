/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HasuraTargetLister helps list HasuraTargets.
// All objects returned here must be treated as read-only.
type HasuraTargetLister interface {
	// List lists all HasuraTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HasuraTarget, err error)
	// HasuraTargets returns an object that can list and get HasuraTargets.
	HasuraTargets(namespace string) HasuraTargetNamespaceLister
	HasuraTargetListerExpansion
}

// hasuraTargetLister implements the HasuraTargetLister interface.
type hasuraTargetLister struct {
	indexer cache.Indexer
}

// NewHasuraTargetLister returns a new HasuraTargetLister.
func NewHasuraTargetLister(indexer cache.Indexer) HasuraTargetLister {
	return &hasuraTargetLister{indexer: indexer}
}

// List lists all HasuraTargets in the indexer.
func (s *hasuraTargetLister) List(selector labels.Selector) (ret []*v1alpha1.HasuraTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HasuraTarget))
	})
	return ret, err
}

// HasuraTargets returns an object that can list and get HasuraTargets.
func (s *hasuraTargetLister) HasuraTargets(namespace string) HasuraTargetNamespaceLister {
	return hasuraTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HasuraTargetNamespaceLister helps list and get HasuraTargets.
// All objects returned here must be treated as read-only.
type HasuraTargetNamespaceLister interface {
	// List lists all HasuraTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HasuraTarget, err error)
	// Get retrieves the HasuraTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HasuraTarget, error)
	HasuraTargetNamespaceListerExpansion
}

// hasuraTargetNamespaceLister implements the HasuraTargetNamespaceLister
// interface.
type hasuraTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HasuraTargets in the indexer for a given namespace.
func (s hasuraTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HasuraTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HasuraTarget))
	})
	return ret, err
}

// Get retrieves the HasuraTarget from the indexer for a given namespace and name.
func (s hasuraTargetNamespaceLister) Get(name string) (*v1alpha1.HasuraTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hasuratarget"), name)
	}
	return obj.(*v1alpha1.HasuraTarget), nil
}
