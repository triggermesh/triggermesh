/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OracleTargetLister helps list OracleTargets.
// All objects returned here must be treated as read-only.
type OracleTargetLister interface {
	// List lists all OracleTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OracleTarget, err error)
	// OracleTargets returns an object that can list and get OracleTargets.
	OracleTargets(namespace string) OracleTargetNamespaceLister
	OracleTargetListerExpansion
}

// oracleTargetLister implements the OracleTargetLister interface.
type oracleTargetLister struct {
	indexer cache.Indexer
}

// NewOracleTargetLister returns a new OracleTargetLister.
func NewOracleTargetLister(indexer cache.Indexer) OracleTargetLister {
	return &oracleTargetLister{indexer: indexer}
}

// List lists all OracleTargets in the indexer.
func (s *oracleTargetLister) List(selector labels.Selector) (ret []*v1alpha1.OracleTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OracleTarget))
	})
	return ret, err
}

// OracleTargets returns an object that can list and get OracleTargets.
func (s *oracleTargetLister) OracleTargets(namespace string) OracleTargetNamespaceLister {
	return oracleTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OracleTargetNamespaceLister helps list and get OracleTargets.
// All objects returned here must be treated as read-only.
type OracleTargetNamespaceLister interface {
	// List lists all OracleTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OracleTarget, err error)
	// Get retrieves the OracleTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OracleTarget, error)
	OracleTargetNamespaceListerExpansion
}

// oracleTargetNamespaceLister implements the OracleTargetNamespaceLister
// interface.
type oracleTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OracleTargets in the indexer for a given namespace.
func (s oracleTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OracleTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OracleTarget))
	})
	return ret, err
}

// Get retrieves the OracleTarget from the indexer for a given namespace and name.
func (s oracleTargetNamespaceLister) Get(name string) (*v1alpha1.OracleTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("oracletarget"), name)
	}
	return obj.(*v1alpha1.OracleTarget), nil
}
