/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SplunkTargetLister helps list SplunkTargets.
// All objects returned here must be treated as read-only.
type SplunkTargetLister interface {
	// List lists all SplunkTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SplunkTarget, err error)
	// SplunkTargets returns an object that can list and get SplunkTargets.
	SplunkTargets(namespace string) SplunkTargetNamespaceLister
	SplunkTargetListerExpansion
}

// splunkTargetLister implements the SplunkTargetLister interface.
type splunkTargetLister struct {
	indexer cache.Indexer
}

// NewSplunkTargetLister returns a new SplunkTargetLister.
func NewSplunkTargetLister(indexer cache.Indexer) SplunkTargetLister {
	return &splunkTargetLister{indexer: indexer}
}

// List lists all SplunkTargets in the indexer.
func (s *splunkTargetLister) List(selector labels.Selector) (ret []*v1alpha1.SplunkTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SplunkTarget))
	})
	return ret, err
}

// SplunkTargets returns an object that can list and get SplunkTargets.
func (s *splunkTargetLister) SplunkTargets(namespace string) SplunkTargetNamespaceLister {
	return splunkTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SplunkTargetNamespaceLister helps list and get SplunkTargets.
// All objects returned here must be treated as read-only.
type SplunkTargetNamespaceLister interface {
	// List lists all SplunkTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SplunkTarget, err error)
	// Get retrieves the SplunkTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SplunkTarget, error)
	SplunkTargetNamespaceListerExpansion
}

// splunkTargetNamespaceLister implements the SplunkTargetNamespaceLister
// interface.
type splunkTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SplunkTargets in the indexer for a given namespace.
func (s splunkTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SplunkTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SplunkTarget))
	})
	return ret, err
}

// Get retrieves the SplunkTarget from the indexer for a given namespace and name.
func (s splunkTargetNamespaceLister) Get(name string) (*v1alpha1.SplunkTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("splunktarget"), name)
	}
	return obj.(*v1alpha1.SplunkTarget), nil
}
