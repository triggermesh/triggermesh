/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSDynamoDBTargetLister helps list AWSDynamoDBTargets.
// All objects returned here must be treated as read-only.
type AWSDynamoDBTargetLister interface {
	// List lists all AWSDynamoDBTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSDynamoDBTarget, err error)
	// AWSDynamoDBTargets returns an object that can list and get AWSDynamoDBTargets.
	AWSDynamoDBTargets(namespace string) AWSDynamoDBTargetNamespaceLister
	AWSDynamoDBTargetListerExpansion
}

// aWSDynamoDBTargetLister implements the AWSDynamoDBTargetLister interface.
type aWSDynamoDBTargetLister struct {
	indexer cache.Indexer
}

// NewAWSDynamoDBTargetLister returns a new AWSDynamoDBTargetLister.
func NewAWSDynamoDBTargetLister(indexer cache.Indexer) AWSDynamoDBTargetLister {
	return &aWSDynamoDBTargetLister{indexer: indexer}
}

// List lists all AWSDynamoDBTargets in the indexer.
func (s *aWSDynamoDBTargetLister) List(selector labels.Selector) (ret []*v1alpha1.AWSDynamoDBTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSDynamoDBTarget))
	})
	return ret, err
}

// AWSDynamoDBTargets returns an object that can list and get AWSDynamoDBTargets.
func (s *aWSDynamoDBTargetLister) AWSDynamoDBTargets(namespace string) AWSDynamoDBTargetNamespaceLister {
	return aWSDynamoDBTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSDynamoDBTargetNamespaceLister helps list and get AWSDynamoDBTargets.
// All objects returned here must be treated as read-only.
type AWSDynamoDBTargetNamespaceLister interface {
	// List lists all AWSDynamoDBTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSDynamoDBTarget, err error)
	// Get retrieves the AWSDynamoDBTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSDynamoDBTarget, error)
	AWSDynamoDBTargetNamespaceListerExpansion
}

// aWSDynamoDBTargetNamespaceLister implements the AWSDynamoDBTargetNamespaceLister
// interface.
type aWSDynamoDBTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSDynamoDBTargets in the indexer for a given namespace.
func (s aWSDynamoDBTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSDynamoDBTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSDynamoDBTarget))
	})
	return ret, err
}

// Get retrieves the AWSDynamoDBTarget from the indexer for a given namespace and name.
func (s aWSDynamoDBTargetNamespaceLister) Get(name string) (*v1alpha1.AWSDynamoDBTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awsdynamodbtarget"), name)
	}
	return obj.(*v1alpha1.AWSDynamoDBTarget), nil
}
