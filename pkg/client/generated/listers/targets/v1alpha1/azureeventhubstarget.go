/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureEventHubsTargetLister helps list AzureEventHubsTargets.
// All objects returned here must be treated as read-only.
type AzureEventHubsTargetLister interface {
	// List lists all AzureEventHubsTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureEventHubsTarget, err error)
	// AzureEventHubsTargets returns an object that can list and get AzureEventHubsTargets.
	AzureEventHubsTargets(namespace string) AzureEventHubsTargetNamespaceLister
	AzureEventHubsTargetListerExpansion
}

// azureEventHubsTargetLister implements the AzureEventHubsTargetLister interface.
type azureEventHubsTargetLister struct {
	indexer cache.Indexer
}

// NewAzureEventHubsTargetLister returns a new AzureEventHubsTargetLister.
func NewAzureEventHubsTargetLister(indexer cache.Indexer) AzureEventHubsTargetLister {
	return &azureEventHubsTargetLister{indexer: indexer}
}

// List lists all AzureEventHubsTargets in the indexer.
func (s *azureEventHubsTargetLister) List(selector labels.Selector) (ret []*v1alpha1.AzureEventHubsTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureEventHubsTarget))
	})
	return ret, err
}

// AzureEventHubsTargets returns an object that can list and get AzureEventHubsTargets.
func (s *azureEventHubsTargetLister) AzureEventHubsTargets(namespace string) AzureEventHubsTargetNamespaceLister {
	return azureEventHubsTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureEventHubsTargetNamespaceLister helps list and get AzureEventHubsTargets.
// All objects returned here must be treated as read-only.
type AzureEventHubsTargetNamespaceLister interface {
	// List lists all AzureEventHubsTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureEventHubsTarget, err error)
	// Get retrieves the AzureEventHubsTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzureEventHubsTarget, error)
	AzureEventHubsTargetNamespaceListerExpansion
}

// azureEventHubsTargetNamespaceLister implements the AzureEventHubsTargetNamespaceLister
// interface.
type azureEventHubsTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureEventHubsTargets in the indexer for a given namespace.
func (s azureEventHubsTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureEventHubsTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureEventHubsTarget))
	})
	return ret, err
}

// Get retrieves the AzureEventHubsTarget from the indexer for a given namespace and name.
func (s azureEventHubsTargetNamespaceLister) Get(name string) (*v1alpha1.AzureEventHubsTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azureeventhubstarget"), name)
	}
	return obj.(*v1alpha1.AzureEventHubsTarget), nil
}
