/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JiraTargetLister helps list JiraTargets.
// All objects returned here must be treated as read-only.
type JiraTargetLister interface {
	// List lists all JiraTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JiraTarget, err error)
	// JiraTargets returns an object that can list and get JiraTargets.
	JiraTargets(namespace string) JiraTargetNamespaceLister
	JiraTargetListerExpansion
}

// jiraTargetLister implements the JiraTargetLister interface.
type jiraTargetLister struct {
	indexer cache.Indexer
}

// NewJiraTargetLister returns a new JiraTargetLister.
func NewJiraTargetLister(indexer cache.Indexer) JiraTargetLister {
	return &jiraTargetLister{indexer: indexer}
}

// List lists all JiraTargets in the indexer.
func (s *jiraTargetLister) List(selector labels.Selector) (ret []*v1alpha1.JiraTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JiraTarget))
	})
	return ret, err
}

// JiraTargets returns an object that can list and get JiraTargets.
func (s *jiraTargetLister) JiraTargets(namespace string) JiraTargetNamespaceLister {
	return jiraTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JiraTargetNamespaceLister helps list and get JiraTargets.
// All objects returned here must be treated as read-only.
type JiraTargetNamespaceLister interface {
	// List lists all JiraTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JiraTarget, err error)
	// Get retrieves the JiraTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.JiraTarget, error)
	JiraTargetNamespaceListerExpansion
}

// jiraTargetNamespaceLister implements the JiraTargetNamespaceLister
// interface.
type jiraTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JiraTargets in the indexer for a given namespace.
func (s jiraTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.JiraTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JiraTarget))
	})
	return ret, err
}

// Get retrieves the JiraTarget from the indexer for a given namespace and name.
func (s jiraTargetNamespaceLister) Get(name string) (*v1alpha1.JiraTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("jiratarget"), name)
	}
	return obj.(*v1alpha1.JiraTarget), nil
}
