/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfluentTargetLister helps list ConfluentTargets.
// All objects returned here must be treated as read-only.
type ConfluentTargetLister interface {
	// List lists all ConfluentTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfluentTarget, err error)
	// ConfluentTargets returns an object that can list and get ConfluentTargets.
	ConfluentTargets(namespace string) ConfluentTargetNamespaceLister
	ConfluentTargetListerExpansion
}

// confluentTargetLister implements the ConfluentTargetLister interface.
type confluentTargetLister struct {
	indexer cache.Indexer
}

// NewConfluentTargetLister returns a new ConfluentTargetLister.
func NewConfluentTargetLister(indexer cache.Indexer) ConfluentTargetLister {
	return &confluentTargetLister{indexer: indexer}
}

// List lists all ConfluentTargets in the indexer.
func (s *confluentTargetLister) List(selector labels.Selector) (ret []*v1alpha1.ConfluentTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfluentTarget))
	})
	return ret, err
}

// ConfluentTargets returns an object that can list and get ConfluentTargets.
func (s *confluentTargetLister) ConfluentTargets(namespace string) ConfluentTargetNamespaceLister {
	return confluentTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfluentTargetNamespaceLister helps list and get ConfluentTargets.
// All objects returned here must be treated as read-only.
type ConfluentTargetNamespaceLister interface {
	// List lists all ConfluentTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfluentTarget, err error)
	// Get retrieves the ConfluentTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfluentTarget, error)
	ConfluentTargetNamespaceListerExpansion
}

// confluentTargetNamespaceLister implements the ConfluentTargetNamespaceLister
// interface.
type confluentTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfluentTargets in the indexer for a given namespace.
func (s confluentTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfluentTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfluentTarget))
	})
	return ret, err
}

// Get retrieves the ConfluentTarget from the indexer for a given namespace and name.
func (s confluentTargetNamespaceLister) Get(name string) (*v1alpha1.ConfluentTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("confluenttarget"), name)
	}
	return obj.(*v1alpha1.ConfluentTarget), nil
}
