/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSComprehendTargetLister helps list AWSComprehendTargets.
// All objects returned here must be treated as read-only.
type AWSComprehendTargetLister interface {
	// List lists all AWSComprehendTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSComprehendTarget, err error)
	// AWSComprehendTargets returns an object that can list and get AWSComprehendTargets.
	AWSComprehendTargets(namespace string) AWSComprehendTargetNamespaceLister
	AWSComprehendTargetListerExpansion
}

// aWSComprehendTargetLister implements the AWSComprehendTargetLister interface.
type aWSComprehendTargetLister struct {
	indexer cache.Indexer
}

// NewAWSComprehendTargetLister returns a new AWSComprehendTargetLister.
func NewAWSComprehendTargetLister(indexer cache.Indexer) AWSComprehendTargetLister {
	return &aWSComprehendTargetLister{indexer: indexer}
}

// List lists all AWSComprehendTargets in the indexer.
func (s *aWSComprehendTargetLister) List(selector labels.Selector) (ret []*v1alpha1.AWSComprehendTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSComprehendTarget))
	})
	return ret, err
}

// AWSComprehendTargets returns an object that can list and get AWSComprehendTargets.
func (s *aWSComprehendTargetLister) AWSComprehendTargets(namespace string) AWSComprehendTargetNamespaceLister {
	return aWSComprehendTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSComprehendTargetNamespaceLister helps list and get AWSComprehendTargets.
// All objects returned here must be treated as read-only.
type AWSComprehendTargetNamespaceLister interface {
	// List lists all AWSComprehendTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSComprehendTarget, err error)
	// Get retrieves the AWSComprehendTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSComprehendTarget, error)
	AWSComprehendTargetNamespaceListerExpansion
}

// aWSComprehendTargetNamespaceLister implements the AWSComprehendTargetNamespaceLister
// interface.
type aWSComprehendTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSComprehendTargets in the indexer for a given namespace.
func (s aWSComprehendTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSComprehendTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSComprehendTarget))
	})
	return ret, err
}

// Get retrieves the AWSComprehendTarget from the indexer for a given namespace and name.
func (s aWSComprehendTargetNamespaceLister) Get(name string) (*v1alpha1.AWSComprehendTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awscomprehendtarget"), name)
	}
	return obj.(*v1alpha1.AWSComprehendTarget), nil
}
