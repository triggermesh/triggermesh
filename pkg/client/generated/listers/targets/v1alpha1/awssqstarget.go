/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSSQSTargetLister helps list AWSSQSTargets.
// All objects returned here must be treated as read-only.
type AWSSQSTargetLister interface {
	// List lists all AWSSQSTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSSQSTarget, err error)
	// AWSSQSTargets returns an object that can list and get AWSSQSTargets.
	AWSSQSTargets(namespace string) AWSSQSTargetNamespaceLister
	AWSSQSTargetListerExpansion
}

// aWSSQSTargetLister implements the AWSSQSTargetLister interface.
type aWSSQSTargetLister struct {
	indexer cache.Indexer
}

// NewAWSSQSTargetLister returns a new AWSSQSTargetLister.
func NewAWSSQSTargetLister(indexer cache.Indexer) AWSSQSTargetLister {
	return &aWSSQSTargetLister{indexer: indexer}
}

// List lists all AWSSQSTargets in the indexer.
func (s *aWSSQSTargetLister) List(selector labels.Selector) (ret []*v1alpha1.AWSSQSTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSSQSTarget))
	})
	return ret, err
}

// AWSSQSTargets returns an object that can list and get AWSSQSTargets.
func (s *aWSSQSTargetLister) AWSSQSTargets(namespace string) AWSSQSTargetNamespaceLister {
	return aWSSQSTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSSQSTargetNamespaceLister helps list and get AWSSQSTargets.
// All objects returned here must be treated as read-only.
type AWSSQSTargetNamespaceLister interface {
	// List lists all AWSSQSTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSSQSTarget, err error)
	// Get retrieves the AWSSQSTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSSQSTarget, error)
	AWSSQSTargetNamespaceListerExpansion
}

// aWSSQSTargetNamespaceLister implements the AWSSQSTargetNamespaceLister
// interface.
type aWSSQSTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSSQSTargets in the indexer for a given namespace.
func (s aWSSQSTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSSQSTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSSQSTarget))
	})
	return ret, err
}

// Get retrieves the AWSSQSTarget from the indexer for a given namespace and name.
func (s aWSSQSTargetNamespaceLister) Get(name string) (*v1alpha1.AWSSQSTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awssqstarget"), name)
	}
	return obj.(*v1alpha1.AWSSQSTarget), nil
}
