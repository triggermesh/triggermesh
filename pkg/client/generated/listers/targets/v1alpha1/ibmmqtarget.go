/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IBMMQTargetLister helps list IBMMQTargets.
// All objects returned here must be treated as read-only.
type IBMMQTargetLister interface {
	// List lists all IBMMQTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IBMMQTarget, err error)
	// IBMMQTargets returns an object that can list and get IBMMQTargets.
	IBMMQTargets(namespace string) IBMMQTargetNamespaceLister
	IBMMQTargetListerExpansion
}

// iBMMQTargetLister implements the IBMMQTargetLister interface.
type iBMMQTargetLister struct {
	indexer cache.Indexer
}

// NewIBMMQTargetLister returns a new IBMMQTargetLister.
func NewIBMMQTargetLister(indexer cache.Indexer) IBMMQTargetLister {
	return &iBMMQTargetLister{indexer: indexer}
}

// List lists all IBMMQTargets in the indexer.
func (s *iBMMQTargetLister) List(selector labels.Selector) (ret []*v1alpha1.IBMMQTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IBMMQTarget))
	})
	return ret, err
}

// IBMMQTargets returns an object that can list and get IBMMQTargets.
func (s *iBMMQTargetLister) IBMMQTargets(namespace string) IBMMQTargetNamespaceLister {
	return iBMMQTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IBMMQTargetNamespaceLister helps list and get IBMMQTargets.
// All objects returned here must be treated as read-only.
type IBMMQTargetNamespaceLister interface {
	// List lists all IBMMQTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IBMMQTarget, err error)
	// Get retrieves the IBMMQTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IBMMQTarget, error)
	IBMMQTargetNamespaceListerExpansion
}

// iBMMQTargetNamespaceLister implements the IBMMQTargetNamespaceLister
// interface.
type iBMMQTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IBMMQTargets in the indexer for a given namespace.
func (s iBMMQTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IBMMQTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IBMMQTarget))
	})
	return ret, err
}

// Get retrieves the IBMMQTarget from the indexer for a given namespace and name.
func (s iBMMQTargetNamespaceLister) Get(name string) (*v1alpha1.IBMMQTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ibmmqtarget"), name)
	}
	return obj.(*v1alpha1.IBMMQTarget), nil
}
