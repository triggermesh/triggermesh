/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureServiceBusSourceLister helps list AzureServiceBusSources.
// All objects returned here must be treated as read-only.
type AzureServiceBusSourceLister interface {
	// List lists all AzureServiceBusSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureServiceBusSource, err error)
	// AzureServiceBusSources returns an object that can list and get AzureServiceBusSources.
	AzureServiceBusSources(namespace string) AzureServiceBusSourceNamespaceLister
	AzureServiceBusSourceListerExpansion
}

// azureServiceBusSourceLister implements the AzureServiceBusSourceLister interface.
type azureServiceBusSourceLister struct {
	indexer cache.Indexer
}

// NewAzureServiceBusSourceLister returns a new AzureServiceBusSourceLister.
func NewAzureServiceBusSourceLister(indexer cache.Indexer) AzureServiceBusSourceLister {
	return &azureServiceBusSourceLister{indexer: indexer}
}

// List lists all AzureServiceBusSources in the indexer.
func (s *azureServiceBusSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureServiceBusSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureServiceBusSource))
	})
	return ret, err
}

// AzureServiceBusSources returns an object that can list and get AzureServiceBusSources.
func (s *azureServiceBusSourceLister) AzureServiceBusSources(namespace string) AzureServiceBusSourceNamespaceLister {
	return azureServiceBusSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureServiceBusSourceNamespaceLister helps list and get AzureServiceBusSources.
// All objects returned here must be treated as read-only.
type AzureServiceBusSourceNamespaceLister interface {
	// List lists all AzureServiceBusSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureServiceBusSource, err error)
	// Get retrieves the AzureServiceBusSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzureServiceBusSource, error)
	AzureServiceBusSourceNamespaceListerExpansion
}

// azureServiceBusSourceNamespaceLister implements the AzureServiceBusSourceNamespaceLister
// interface.
type azureServiceBusSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureServiceBusSources in the indexer for a given namespace.
func (s azureServiceBusSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureServiceBusSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureServiceBusSource))
	})
	return ret, err
}

// Get retrieves the AzureServiceBusSource from the indexer for a given namespace and name.
func (s azureServiceBusSourceNamespaceLister) Get(name string) (*v1alpha1.AzureServiceBusSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azureservicebussource"), name)
	}
	return obj.(*v1alpha1.AzureServiceBusSource), nil
}
