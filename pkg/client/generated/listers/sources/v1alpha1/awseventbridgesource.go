/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSEventBridgeSourceLister helps list AWSEventBridgeSources.
// All objects returned here must be treated as read-only.
type AWSEventBridgeSourceLister interface {
	// List lists all AWSEventBridgeSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSEventBridgeSource, err error)
	// AWSEventBridgeSources returns an object that can list and get AWSEventBridgeSources.
	AWSEventBridgeSources(namespace string) AWSEventBridgeSourceNamespaceLister
	AWSEventBridgeSourceListerExpansion
}

// aWSEventBridgeSourceLister implements the AWSEventBridgeSourceLister interface.
type aWSEventBridgeSourceLister struct {
	indexer cache.Indexer
}

// NewAWSEventBridgeSourceLister returns a new AWSEventBridgeSourceLister.
func NewAWSEventBridgeSourceLister(indexer cache.Indexer) AWSEventBridgeSourceLister {
	return &aWSEventBridgeSourceLister{indexer: indexer}
}

// List lists all AWSEventBridgeSources in the indexer.
func (s *aWSEventBridgeSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSEventBridgeSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSEventBridgeSource))
	})
	return ret, err
}

// AWSEventBridgeSources returns an object that can list and get AWSEventBridgeSources.
func (s *aWSEventBridgeSourceLister) AWSEventBridgeSources(namespace string) AWSEventBridgeSourceNamespaceLister {
	return aWSEventBridgeSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSEventBridgeSourceNamespaceLister helps list and get AWSEventBridgeSources.
// All objects returned here must be treated as read-only.
type AWSEventBridgeSourceNamespaceLister interface {
	// List lists all AWSEventBridgeSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSEventBridgeSource, err error)
	// Get retrieves the AWSEventBridgeSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSEventBridgeSource, error)
	AWSEventBridgeSourceNamespaceListerExpansion
}

// aWSEventBridgeSourceNamespaceLister implements the AWSEventBridgeSourceNamespaceLister
// interface.
type aWSEventBridgeSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSEventBridgeSources in the indexer for a given namespace.
func (s aWSEventBridgeSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSEventBridgeSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSEventBridgeSource))
	})
	return ret, err
}

// Get retrieves the AWSEventBridgeSource from the indexer for a given namespace and name.
func (s aWSEventBridgeSourceNamespaceLister) Get(name string) (*v1alpha1.AWSEventBridgeSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awseventbridgesource"), name)
	}
	return obj.(*v1alpha1.AWSEventBridgeSource), nil
}
