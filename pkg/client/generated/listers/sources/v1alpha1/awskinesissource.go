/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSKinesisSourceLister helps list AWSKinesisSources.
// All objects returned here must be treated as read-only.
type AWSKinesisSourceLister interface {
	// List lists all AWSKinesisSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSKinesisSource, err error)
	// AWSKinesisSources returns an object that can list and get AWSKinesisSources.
	AWSKinesisSources(namespace string) AWSKinesisSourceNamespaceLister
	AWSKinesisSourceListerExpansion
}

// aWSKinesisSourceLister implements the AWSKinesisSourceLister interface.
type aWSKinesisSourceLister struct {
	indexer cache.Indexer
}

// NewAWSKinesisSourceLister returns a new AWSKinesisSourceLister.
func NewAWSKinesisSourceLister(indexer cache.Indexer) AWSKinesisSourceLister {
	return &aWSKinesisSourceLister{indexer: indexer}
}

// List lists all AWSKinesisSources in the indexer.
func (s *aWSKinesisSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSKinesisSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSKinesisSource))
	})
	return ret, err
}

// AWSKinesisSources returns an object that can list and get AWSKinesisSources.
func (s *aWSKinesisSourceLister) AWSKinesisSources(namespace string) AWSKinesisSourceNamespaceLister {
	return aWSKinesisSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSKinesisSourceNamespaceLister helps list and get AWSKinesisSources.
// All objects returned here must be treated as read-only.
type AWSKinesisSourceNamespaceLister interface {
	// List lists all AWSKinesisSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSKinesisSource, err error)
	// Get retrieves the AWSKinesisSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSKinesisSource, error)
	AWSKinesisSourceNamespaceListerExpansion
}

// aWSKinesisSourceNamespaceLister implements the AWSKinesisSourceNamespaceLister
// interface.
type aWSKinesisSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSKinesisSources in the indexer for a given namespace.
func (s aWSKinesisSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSKinesisSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSKinesisSource))
	})
	return ret, err
}

// Get retrieves the AWSKinesisSource from the indexer for a given namespace and name.
func (s aWSKinesisSourceNamespaceLister) Get(name string) (*v1alpha1.AWSKinesisSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awskinesissource"), name)
	}
	return obj.(*v1alpha1.AWSKinesisSource), nil
}
