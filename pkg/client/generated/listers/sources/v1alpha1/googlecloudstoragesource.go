/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GoogleCloudStorageSourceLister helps list GoogleCloudStorageSources.
// All objects returned here must be treated as read-only.
type GoogleCloudStorageSourceLister interface {
	// List lists all GoogleCloudStorageSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudStorageSource, err error)
	// GoogleCloudStorageSources returns an object that can list and get GoogleCloudStorageSources.
	GoogleCloudStorageSources(namespace string) GoogleCloudStorageSourceNamespaceLister
	GoogleCloudStorageSourceListerExpansion
}

// googleCloudStorageSourceLister implements the GoogleCloudStorageSourceLister interface.
type googleCloudStorageSourceLister struct {
	indexer cache.Indexer
}

// NewGoogleCloudStorageSourceLister returns a new GoogleCloudStorageSourceLister.
func NewGoogleCloudStorageSourceLister(indexer cache.Indexer) GoogleCloudStorageSourceLister {
	return &googleCloudStorageSourceLister{indexer: indexer}
}

// List lists all GoogleCloudStorageSources in the indexer.
func (s *googleCloudStorageSourceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudStorageSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudStorageSource))
	})
	return ret, err
}

// GoogleCloudStorageSources returns an object that can list and get GoogleCloudStorageSources.
func (s *googleCloudStorageSourceLister) GoogleCloudStorageSources(namespace string) GoogleCloudStorageSourceNamespaceLister {
	return googleCloudStorageSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GoogleCloudStorageSourceNamespaceLister helps list and get GoogleCloudStorageSources.
// All objects returned here must be treated as read-only.
type GoogleCloudStorageSourceNamespaceLister interface {
	// List lists all GoogleCloudStorageSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudStorageSource, err error)
	// Get retrieves the GoogleCloudStorageSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GoogleCloudStorageSource, error)
	GoogleCloudStorageSourceNamespaceListerExpansion
}

// googleCloudStorageSourceNamespaceLister implements the GoogleCloudStorageSourceNamespaceLister
// interface.
type googleCloudStorageSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GoogleCloudStorageSources in the indexer for a given namespace.
func (s googleCloudStorageSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudStorageSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudStorageSource))
	})
	return ret, err
}

// Get retrieves the GoogleCloudStorageSource from the indexer for a given namespace and name.
func (s googleCloudStorageSourceNamespaceLister) Get(name string) (*v1alpha1.GoogleCloudStorageSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("googlecloudstoragesource"), name)
	}
	return obj.(*v1alpha1.GoogleCloudStorageSource), nil
}
