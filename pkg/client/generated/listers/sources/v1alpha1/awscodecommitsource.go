/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSCodeCommitSourceLister helps list AWSCodeCommitSources.
// All objects returned here must be treated as read-only.
type AWSCodeCommitSourceLister interface {
	// List lists all AWSCodeCommitSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSCodeCommitSource, err error)
	// AWSCodeCommitSources returns an object that can list and get AWSCodeCommitSources.
	AWSCodeCommitSources(namespace string) AWSCodeCommitSourceNamespaceLister
	AWSCodeCommitSourceListerExpansion
}

// aWSCodeCommitSourceLister implements the AWSCodeCommitSourceLister interface.
type aWSCodeCommitSourceLister struct {
	indexer cache.Indexer
}

// NewAWSCodeCommitSourceLister returns a new AWSCodeCommitSourceLister.
func NewAWSCodeCommitSourceLister(indexer cache.Indexer) AWSCodeCommitSourceLister {
	return &aWSCodeCommitSourceLister{indexer: indexer}
}

// List lists all AWSCodeCommitSources in the indexer.
func (s *aWSCodeCommitSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSCodeCommitSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSCodeCommitSource))
	})
	return ret, err
}

// AWSCodeCommitSources returns an object that can list and get AWSCodeCommitSources.
func (s *aWSCodeCommitSourceLister) AWSCodeCommitSources(namespace string) AWSCodeCommitSourceNamespaceLister {
	return aWSCodeCommitSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSCodeCommitSourceNamespaceLister helps list and get AWSCodeCommitSources.
// All objects returned here must be treated as read-only.
type AWSCodeCommitSourceNamespaceLister interface {
	// List lists all AWSCodeCommitSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSCodeCommitSource, err error)
	// Get retrieves the AWSCodeCommitSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSCodeCommitSource, error)
	AWSCodeCommitSourceNamespaceListerExpansion
}

// aWSCodeCommitSourceNamespaceLister implements the AWSCodeCommitSourceNamespaceLister
// interface.
type aWSCodeCommitSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSCodeCommitSources in the indexer for a given namespace.
func (s aWSCodeCommitSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSCodeCommitSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSCodeCommitSource))
	})
	return ret, err
}

// Get retrieves the AWSCodeCommitSource from the indexer for a given namespace and name.
func (s aWSCodeCommitSourceNamespaceLister) Get(name string) (*v1alpha1.AWSCodeCommitSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awscodecommitsource"), name)
	}
	return obj.(*v1alpha1.AWSCodeCommitSource), nil
}
