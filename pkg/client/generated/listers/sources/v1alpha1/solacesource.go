/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SolaceSourceLister helps list SolaceSources.
// All objects returned here must be treated as read-only.
type SolaceSourceLister interface {
	// List lists all SolaceSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SolaceSource, err error)
	// SolaceSources returns an object that can list and get SolaceSources.
	SolaceSources(namespace string) SolaceSourceNamespaceLister
	SolaceSourceListerExpansion
}

// solaceSourceLister implements the SolaceSourceLister interface.
type solaceSourceLister struct {
	indexer cache.Indexer
}

// NewSolaceSourceLister returns a new SolaceSourceLister.
func NewSolaceSourceLister(indexer cache.Indexer) SolaceSourceLister {
	return &solaceSourceLister{indexer: indexer}
}

// List lists all SolaceSources in the indexer.
func (s *solaceSourceLister) List(selector labels.Selector) (ret []*v1alpha1.SolaceSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SolaceSource))
	})
	return ret, err
}

// SolaceSources returns an object that can list and get SolaceSources.
func (s *solaceSourceLister) SolaceSources(namespace string) SolaceSourceNamespaceLister {
	return solaceSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SolaceSourceNamespaceLister helps list and get SolaceSources.
// All objects returned here must be treated as read-only.
type SolaceSourceNamespaceLister interface {
	// List lists all SolaceSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SolaceSource, err error)
	// Get retrieves the SolaceSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SolaceSource, error)
	SolaceSourceNamespaceListerExpansion
}

// solaceSourceNamespaceLister implements the SolaceSourceNamespaceLister
// interface.
type solaceSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SolaceSources in the indexer for a given namespace.
func (s solaceSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SolaceSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SolaceSource))
	})
	return ret, err
}

// Get retrieves the SolaceSource from the indexer for a given namespace and name.
func (s solaceSourceNamespaceLister) Get(name string) (*v1alpha1.SolaceSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("solacesource"), name)
	}
	return obj.(*v1alpha1.SolaceSource), nil
}
