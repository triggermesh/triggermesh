/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSS3SourceLister helps list AWSS3Sources.
// All objects returned here must be treated as read-only.
type AWSS3SourceLister interface {
	// List lists all AWSS3Sources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSS3Source, err error)
	// AWSS3Sources returns an object that can list and get AWSS3Sources.
	AWSS3Sources(namespace string) AWSS3SourceNamespaceLister
	AWSS3SourceListerExpansion
}

// aWSS3SourceLister implements the AWSS3SourceLister interface.
type aWSS3SourceLister struct {
	indexer cache.Indexer
}

// NewAWSS3SourceLister returns a new AWSS3SourceLister.
func NewAWSS3SourceLister(indexer cache.Indexer) AWSS3SourceLister {
	return &aWSS3SourceLister{indexer: indexer}
}

// List lists all AWSS3Sources in the indexer.
func (s *aWSS3SourceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSS3Source, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSS3Source))
	})
	return ret, err
}

// AWSS3Sources returns an object that can list and get AWSS3Sources.
func (s *aWSS3SourceLister) AWSS3Sources(namespace string) AWSS3SourceNamespaceLister {
	return aWSS3SourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSS3SourceNamespaceLister helps list and get AWSS3Sources.
// All objects returned here must be treated as read-only.
type AWSS3SourceNamespaceLister interface {
	// List lists all AWSS3Sources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSS3Source, err error)
	// Get retrieves the AWSS3Source from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSS3Source, error)
	AWSS3SourceNamespaceListerExpansion
}

// aWSS3SourceNamespaceLister implements the AWSS3SourceNamespaceLister
// interface.
type aWSS3SourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSS3Sources in the indexer for a given namespace.
func (s aWSS3SourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSS3Source, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSS3Source))
	})
	return ret, err
}

// Get retrieves the AWSS3Source from the indexer for a given namespace and name.
func (s aWSS3SourceNamespaceLister) Get(name string) (*v1alpha1.AWSS3Source, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awss3source"), name)
	}
	return obj.(*v1alpha1.AWSS3Source), nil
}
