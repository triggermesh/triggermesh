/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureBlobStorageSourceLister helps list AzureBlobStorageSources.
// All objects returned here must be treated as read-only.
type AzureBlobStorageSourceLister interface {
	// List lists all AzureBlobStorageSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureBlobStorageSource, err error)
	// AzureBlobStorageSources returns an object that can list and get AzureBlobStorageSources.
	AzureBlobStorageSources(namespace string) AzureBlobStorageSourceNamespaceLister
	AzureBlobStorageSourceListerExpansion
}

// azureBlobStorageSourceLister implements the AzureBlobStorageSourceLister interface.
type azureBlobStorageSourceLister struct {
	indexer cache.Indexer
}

// NewAzureBlobStorageSourceLister returns a new AzureBlobStorageSourceLister.
func NewAzureBlobStorageSourceLister(indexer cache.Indexer) AzureBlobStorageSourceLister {
	return &azureBlobStorageSourceLister{indexer: indexer}
}

// List lists all AzureBlobStorageSources in the indexer.
func (s *azureBlobStorageSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureBlobStorageSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureBlobStorageSource))
	})
	return ret, err
}

// AzureBlobStorageSources returns an object that can list and get AzureBlobStorageSources.
func (s *azureBlobStorageSourceLister) AzureBlobStorageSources(namespace string) AzureBlobStorageSourceNamespaceLister {
	return azureBlobStorageSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureBlobStorageSourceNamespaceLister helps list and get AzureBlobStorageSources.
// All objects returned here must be treated as read-only.
type AzureBlobStorageSourceNamespaceLister interface {
	// List lists all AzureBlobStorageSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureBlobStorageSource, err error)
	// Get retrieves the AzureBlobStorageSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzureBlobStorageSource, error)
	AzureBlobStorageSourceNamespaceListerExpansion
}

// azureBlobStorageSourceNamespaceLister implements the AzureBlobStorageSourceNamespaceLister
// interface.
type azureBlobStorageSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureBlobStorageSources in the indexer for a given namespace.
func (s azureBlobStorageSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureBlobStorageSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureBlobStorageSource))
	})
	return ret, err
}

// Get retrieves the AzureBlobStorageSource from the indexer for a given namespace and name.
func (s azureBlobStorageSourceNamespaceLister) Get(name string) (*v1alpha1.AzureBlobStorageSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azureblobstoragesource"), name)
	}
	return obj.(*v1alpha1.AzureBlobStorageSource), nil
}
