/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GoogleCloudAuditLogsSourceLister helps list GoogleCloudAuditLogsSources.
// All objects returned here must be treated as read-only.
type GoogleCloudAuditLogsSourceLister interface {
	// List lists all GoogleCloudAuditLogsSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudAuditLogsSource, err error)
	// GoogleCloudAuditLogsSources returns an object that can list and get GoogleCloudAuditLogsSources.
	GoogleCloudAuditLogsSources(namespace string) GoogleCloudAuditLogsSourceNamespaceLister
	GoogleCloudAuditLogsSourceListerExpansion
}

// googleCloudAuditLogsSourceLister implements the GoogleCloudAuditLogsSourceLister interface.
type googleCloudAuditLogsSourceLister struct {
	indexer cache.Indexer
}

// NewGoogleCloudAuditLogsSourceLister returns a new GoogleCloudAuditLogsSourceLister.
func NewGoogleCloudAuditLogsSourceLister(indexer cache.Indexer) GoogleCloudAuditLogsSourceLister {
	return &googleCloudAuditLogsSourceLister{indexer: indexer}
}

// List lists all GoogleCloudAuditLogsSources in the indexer.
func (s *googleCloudAuditLogsSourceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudAuditLogsSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudAuditLogsSource))
	})
	return ret, err
}

// GoogleCloudAuditLogsSources returns an object that can list and get GoogleCloudAuditLogsSources.
func (s *googleCloudAuditLogsSourceLister) GoogleCloudAuditLogsSources(namespace string) GoogleCloudAuditLogsSourceNamespaceLister {
	return googleCloudAuditLogsSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GoogleCloudAuditLogsSourceNamespaceLister helps list and get GoogleCloudAuditLogsSources.
// All objects returned here must be treated as read-only.
type GoogleCloudAuditLogsSourceNamespaceLister interface {
	// List lists all GoogleCloudAuditLogsSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudAuditLogsSource, err error)
	// Get retrieves the GoogleCloudAuditLogsSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GoogleCloudAuditLogsSource, error)
	GoogleCloudAuditLogsSourceNamespaceListerExpansion
}

// googleCloudAuditLogsSourceNamespaceLister implements the GoogleCloudAuditLogsSourceNamespaceLister
// interface.
type googleCloudAuditLogsSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GoogleCloudAuditLogsSources in the indexer for a given namespace.
func (s googleCloudAuditLogsSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudAuditLogsSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudAuditLogsSource))
	})
	return ret, err
}

// Get retrieves the GoogleCloudAuditLogsSource from the indexer for a given namespace and name.
func (s googleCloudAuditLogsSourceNamespaceLister) Get(name string) (*v1alpha1.GoogleCloudAuditLogsSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("googlecloudauditlogssource"), name)
	}
	return obj.(*v1alpha1.GoogleCloudAuditLogsSource), nil
}
