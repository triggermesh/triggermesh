/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GoogleCloudIoTSourceLister helps list GoogleCloudIoTSources.
// All objects returned here must be treated as read-only.
type GoogleCloudIoTSourceLister interface {
	// List lists all GoogleCloudIoTSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudIoTSource, err error)
	// GoogleCloudIoTSources returns an object that can list and get GoogleCloudIoTSources.
	GoogleCloudIoTSources(namespace string) GoogleCloudIoTSourceNamespaceLister
	GoogleCloudIoTSourceListerExpansion
}

// googleCloudIoTSourceLister implements the GoogleCloudIoTSourceLister interface.
type googleCloudIoTSourceLister struct {
	indexer cache.Indexer
}

// NewGoogleCloudIoTSourceLister returns a new GoogleCloudIoTSourceLister.
func NewGoogleCloudIoTSourceLister(indexer cache.Indexer) GoogleCloudIoTSourceLister {
	return &googleCloudIoTSourceLister{indexer: indexer}
}

// List lists all GoogleCloudIoTSources in the indexer.
func (s *googleCloudIoTSourceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudIoTSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudIoTSource))
	})
	return ret, err
}

// GoogleCloudIoTSources returns an object that can list and get GoogleCloudIoTSources.
func (s *googleCloudIoTSourceLister) GoogleCloudIoTSources(namespace string) GoogleCloudIoTSourceNamespaceLister {
	return googleCloudIoTSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GoogleCloudIoTSourceNamespaceLister helps list and get GoogleCloudIoTSources.
// All objects returned here must be treated as read-only.
type GoogleCloudIoTSourceNamespaceLister interface {
	// List lists all GoogleCloudIoTSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudIoTSource, err error)
	// Get retrieves the GoogleCloudIoTSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GoogleCloudIoTSource, error)
	GoogleCloudIoTSourceNamespaceListerExpansion
}

// googleCloudIoTSourceNamespaceLister implements the GoogleCloudIoTSourceNamespaceLister
// interface.
type googleCloudIoTSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GoogleCloudIoTSources in the indexer for a given namespace.
func (s googleCloudIoTSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudIoTSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudIoTSource))
	})
	return ret, err
}

// Get retrieves the GoogleCloudIoTSource from the indexer for a given namespace and name.
func (s googleCloudIoTSourceNamespaceLister) Get(name string) (*v1alpha1.GoogleCloudIoTSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("googlecloudiotsource"), name)
	}
	return obj.(*v1alpha1.GoogleCloudIoTSource), nil
}
