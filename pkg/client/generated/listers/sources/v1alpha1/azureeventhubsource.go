/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureEventHubSourceLister helps list AzureEventHubSources.
// All objects returned here must be treated as read-only.
type AzureEventHubSourceLister interface {
	// List lists all AzureEventHubSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureEventHubSource, err error)
	// AzureEventHubSources returns an object that can list and get AzureEventHubSources.
	AzureEventHubSources(namespace string) AzureEventHubSourceNamespaceLister
	AzureEventHubSourceListerExpansion
}

// azureEventHubSourceLister implements the AzureEventHubSourceLister interface.
type azureEventHubSourceLister struct {
	indexer cache.Indexer
}

// NewAzureEventHubSourceLister returns a new AzureEventHubSourceLister.
func NewAzureEventHubSourceLister(indexer cache.Indexer) AzureEventHubSourceLister {
	return &azureEventHubSourceLister{indexer: indexer}
}

// List lists all AzureEventHubSources in the indexer.
func (s *azureEventHubSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureEventHubSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureEventHubSource))
	})
	return ret, err
}

// AzureEventHubSources returns an object that can list and get AzureEventHubSources.
func (s *azureEventHubSourceLister) AzureEventHubSources(namespace string) AzureEventHubSourceNamespaceLister {
	return azureEventHubSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureEventHubSourceNamespaceLister helps list and get AzureEventHubSources.
// All objects returned here must be treated as read-only.
type AzureEventHubSourceNamespaceLister interface {
	// List lists all AzureEventHubSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureEventHubSource, err error)
	// Get retrieves the AzureEventHubSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzureEventHubSource, error)
	AzureEventHubSourceNamespaceListerExpansion
}

// azureEventHubSourceNamespaceLister implements the AzureEventHubSourceNamespaceLister
// interface.
type azureEventHubSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureEventHubSources in the indexer for a given namespace.
func (s azureEventHubSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureEventHubSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureEventHubSource))
	})
	return ret, err
}

// Get retrieves the AzureEventHubSource from the indexer for a given namespace and name.
func (s azureEventHubSourceNamespaceLister) Get(name string) (*v1alpha1.AzureEventHubSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azureeventhubsource"), name)
	}
	return obj.(*v1alpha1.AzureEventHubSource), nil
}
