/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSPerformanceInsightsSourceLister helps list AWSPerformanceInsightsSources.
// All objects returned here must be treated as read-only.
type AWSPerformanceInsightsSourceLister interface {
	// List lists all AWSPerformanceInsightsSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSPerformanceInsightsSource, err error)
	// AWSPerformanceInsightsSources returns an object that can list and get AWSPerformanceInsightsSources.
	AWSPerformanceInsightsSources(namespace string) AWSPerformanceInsightsSourceNamespaceLister
	AWSPerformanceInsightsSourceListerExpansion
}

// aWSPerformanceInsightsSourceLister implements the AWSPerformanceInsightsSourceLister interface.
type aWSPerformanceInsightsSourceLister struct {
	indexer cache.Indexer
}

// NewAWSPerformanceInsightsSourceLister returns a new AWSPerformanceInsightsSourceLister.
func NewAWSPerformanceInsightsSourceLister(indexer cache.Indexer) AWSPerformanceInsightsSourceLister {
	return &aWSPerformanceInsightsSourceLister{indexer: indexer}
}

// List lists all AWSPerformanceInsightsSources in the indexer.
func (s *aWSPerformanceInsightsSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSPerformanceInsightsSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSPerformanceInsightsSource))
	})
	return ret, err
}

// AWSPerformanceInsightsSources returns an object that can list and get AWSPerformanceInsightsSources.
func (s *aWSPerformanceInsightsSourceLister) AWSPerformanceInsightsSources(namespace string) AWSPerformanceInsightsSourceNamespaceLister {
	return aWSPerformanceInsightsSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSPerformanceInsightsSourceNamespaceLister helps list and get AWSPerformanceInsightsSources.
// All objects returned here must be treated as read-only.
type AWSPerformanceInsightsSourceNamespaceLister interface {
	// List lists all AWSPerformanceInsightsSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSPerformanceInsightsSource, err error)
	// Get retrieves the AWSPerformanceInsightsSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSPerformanceInsightsSource, error)
	AWSPerformanceInsightsSourceNamespaceListerExpansion
}

// aWSPerformanceInsightsSourceNamespaceLister implements the AWSPerformanceInsightsSourceNamespaceLister
// interface.
type aWSPerformanceInsightsSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSPerformanceInsightsSources in the indexer for a given namespace.
func (s aWSPerformanceInsightsSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSPerformanceInsightsSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSPerformanceInsightsSource))
	})
	return ret, err
}

// Get retrieves the AWSPerformanceInsightsSource from the indexer for a given namespace and name.
func (s aWSPerformanceInsightsSourceNamespaceLister) Get(name string) (*v1alpha1.AWSPerformanceInsightsSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awsperformanceinsightssource"), name)
	}
	return obj.(*v1alpha1.AWSPerformanceInsightsSource), nil
}
