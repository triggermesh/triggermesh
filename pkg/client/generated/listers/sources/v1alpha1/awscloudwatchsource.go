/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSCloudWatchSourceLister helps list AWSCloudWatchSources.
// All objects returned here must be treated as read-only.
type AWSCloudWatchSourceLister interface {
	// List lists all AWSCloudWatchSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSCloudWatchSource, err error)
	// AWSCloudWatchSources returns an object that can list and get AWSCloudWatchSources.
	AWSCloudWatchSources(namespace string) AWSCloudWatchSourceNamespaceLister
	AWSCloudWatchSourceListerExpansion
}

// aWSCloudWatchSourceLister implements the AWSCloudWatchSourceLister interface.
type aWSCloudWatchSourceLister struct {
	indexer cache.Indexer
}

// NewAWSCloudWatchSourceLister returns a new AWSCloudWatchSourceLister.
func NewAWSCloudWatchSourceLister(indexer cache.Indexer) AWSCloudWatchSourceLister {
	return &aWSCloudWatchSourceLister{indexer: indexer}
}

// List lists all AWSCloudWatchSources in the indexer.
func (s *aWSCloudWatchSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSCloudWatchSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSCloudWatchSource))
	})
	return ret, err
}

// AWSCloudWatchSources returns an object that can list and get AWSCloudWatchSources.
func (s *aWSCloudWatchSourceLister) AWSCloudWatchSources(namespace string) AWSCloudWatchSourceNamespaceLister {
	return aWSCloudWatchSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSCloudWatchSourceNamespaceLister helps list and get AWSCloudWatchSources.
// All objects returned here must be treated as read-only.
type AWSCloudWatchSourceNamespaceLister interface {
	// List lists all AWSCloudWatchSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSCloudWatchSource, err error)
	// Get retrieves the AWSCloudWatchSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSCloudWatchSource, error)
	AWSCloudWatchSourceNamespaceListerExpansion
}

// aWSCloudWatchSourceNamespaceLister implements the AWSCloudWatchSourceNamespaceLister
// interface.
type aWSCloudWatchSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSCloudWatchSources in the indexer for a given namespace.
func (s aWSCloudWatchSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSCloudWatchSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSCloudWatchSource))
	})
	return ret, err
}

// Get retrieves the AWSCloudWatchSource from the indexer for a given namespace and name.
func (s aWSCloudWatchSourceNamespaceLister) Get(name string) (*v1alpha1.AWSCloudWatchSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awscloudwatchsource"), name)
	}
	return obj.(*v1alpha1.AWSCloudWatchSource), nil
}
