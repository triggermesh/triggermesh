/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IBMMQSourceLister helps list IBMMQSources.
// All objects returned here must be treated as read-only.
type IBMMQSourceLister interface {
	// List lists all IBMMQSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IBMMQSource, err error)
	// IBMMQSources returns an object that can list and get IBMMQSources.
	IBMMQSources(namespace string) IBMMQSourceNamespaceLister
	IBMMQSourceListerExpansion
}

// iBMMQSourceLister implements the IBMMQSourceLister interface.
type iBMMQSourceLister struct {
	indexer cache.Indexer
}

// NewIBMMQSourceLister returns a new IBMMQSourceLister.
func NewIBMMQSourceLister(indexer cache.Indexer) IBMMQSourceLister {
	return &iBMMQSourceLister{indexer: indexer}
}

// List lists all IBMMQSources in the indexer.
func (s *iBMMQSourceLister) List(selector labels.Selector) (ret []*v1alpha1.IBMMQSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IBMMQSource))
	})
	return ret, err
}

// IBMMQSources returns an object that can list and get IBMMQSources.
func (s *iBMMQSourceLister) IBMMQSources(namespace string) IBMMQSourceNamespaceLister {
	return iBMMQSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IBMMQSourceNamespaceLister helps list and get IBMMQSources.
// All objects returned here must be treated as read-only.
type IBMMQSourceNamespaceLister interface {
	// List lists all IBMMQSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IBMMQSource, err error)
	// Get retrieves the IBMMQSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IBMMQSource, error)
	IBMMQSourceNamespaceListerExpansion
}

// iBMMQSourceNamespaceLister implements the IBMMQSourceNamespaceLister
// interface.
type iBMMQSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IBMMQSources in the indexer for a given namespace.
func (s iBMMQSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IBMMQSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IBMMQSource))
	})
	return ret, err
}

// Get retrieves the IBMMQSource from the indexer for a given namespace and name.
func (s iBMMQSourceNamespaceLister) Get(name string) (*v1alpha1.IBMMQSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ibmmqsource"), name)
	}
	return obj.(*v1alpha1.IBMMQSource), nil
}
