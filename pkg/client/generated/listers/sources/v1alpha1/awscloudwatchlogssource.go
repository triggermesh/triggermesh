/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSCloudWatchLogsSourceLister helps list AWSCloudWatchLogsSources.
// All objects returned here must be treated as read-only.
type AWSCloudWatchLogsSourceLister interface {
	// List lists all AWSCloudWatchLogsSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSCloudWatchLogsSource, err error)
	// AWSCloudWatchLogsSources returns an object that can list and get AWSCloudWatchLogsSources.
	AWSCloudWatchLogsSources(namespace string) AWSCloudWatchLogsSourceNamespaceLister
	AWSCloudWatchLogsSourceListerExpansion
}

// aWSCloudWatchLogsSourceLister implements the AWSCloudWatchLogsSourceLister interface.
type aWSCloudWatchLogsSourceLister struct {
	indexer cache.Indexer
}

// NewAWSCloudWatchLogsSourceLister returns a new AWSCloudWatchLogsSourceLister.
func NewAWSCloudWatchLogsSourceLister(indexer cache.Indexer) AWSCloudWatchLogsSourceLister {
	return &aWSCloudWatchLogsSourceLister{indexer: indexer}
}

// List lists all AWSCloudWatchLogsSources in the indexer.
func (s *aWSCloudWatchLogsSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSCloudWatchLogsSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSCloudWatchLogsSource))
	})
	return ret, err
}

// AWSCloudWatchLogsSources returns an object that can list and get AWSCloudWatchLogsSources.
func (s *aWSCloudWatchLogsSourceLister) AWSCloudWatchLogsSources(namespace string) AWSCloudWatchLogsSourceNamespaceLister {
	return aWSCloudWatchLogsSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSCloudWatchLogsSourceNamespaceLister helps list and get AWSCloudWatchLogsSources.
// All objects returned here must be treated as read-only.
type AWSCloudWatchLogsSourceNamespaceLister interface {
	// List lists all AWSCloudWatchLogsSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AWSCloudWatchLogsSource, err error)
	// Get retrieves the AWSCloudWatchLogsSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AWSCloudWatchLogsSource, error)
	AWSCloudWatchLogsSourceNamespaceListerExpansion
}

// aWSCloudWatchLogsSourceNamespaceLister implements the AWSCloudWatchLogsSourceNamespaceLister
// interface.
type aWSCloudWatchLogsSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSCloudWatchLogsSources in the indexer for a given namespace.
func (s aWSCloudWatchLogsSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSCloudWatchLogsSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSCloudWatchLogsSource))
	})
	return ret, err
}

// Get retrieves the AWSCloudWatchLogsSource from the indexer for a given namespace and name.
func (s aWSCloudWatchLogsSourceNamespaceLister) Get(name string) (*v1alpha1.AWSCloudWatchLogsSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awscloudwatchlogssource"), name)
	}
	return obj.(*v1alpha1.AWSCloudWatchLogsSource), nil
}
