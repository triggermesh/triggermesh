/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureEventGridSourceLister helps list AzureEventGridSources.
// All objects returned here must be treated as read-only.
type AzureEventGridSourceLister interface {
	// List lists all AzureEventGridSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureEventGridSource, err error)
	// AzureEventGridSources returns an object that can list and get AzureEventGridSources.
	AzureEventGridSources(namespace string) AzureEventGridSourceNamespaceLister
	AzureEventGridSourceListerExpansion
}

// azureEventGridSourceLister implements the AzureEventGridSourceLister interface.
type azureEventGridSourceLister struct {
	indexer cache.Indexer
}

// NewAzureEventGridSourceLister returns a new AzureEventGridSourceLister.
func NewAzureEventGridSourceLister(indexer cache.Indexer) AzureEventGridSourceLister {
	return &azureEventGridSourceLister{indexer: indexer}
}

// List lists all AzureEventGridSources in the indexer.
func (s *azureEventGridSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureEventGridSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureEventGridSource))
	})
	return ret, err
}

// AzureEventGridSources returns an object that can list and get AzureEventGridSources.
func (s *azureEventGridSourceLister) AzureEventGridSources(namespace string) AzureEventGridSourceNamespaceLister {
	return azureEventGridSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureEventGridSourceNamespaceLister helps list and get AzureEventGridSources.
// All objects returned here must be treated as read-only.
type AzureEventGridSourceNamespaceLister interface {
	// List lists all AzureEventGridSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureEventGridSource, err error)
	// Get retrieves the AzureEventGridSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzureEventGridSource, error)
	AzureEventGridSourceNamespaceListerExpansion
}

// azureEventGridSourceNamespaceLister implements the AzureEventGridSourceNamespaceLister
// interface.
type azureEventGridSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureEventGridSources in the indexer for a given namespace.
func (s azureEventGridSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureEventGridSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureEventGridSource))
	})
	return ret, err
}

// Get retrieves the AzureEventGridSource from the indexer for a given namespace and name.
func (s azureEventGridSourceNamespaceLister) Get(name string) (*v1alpha1.AzureEventGridSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azureeventgridsource"), name)
	}
	return obj.(*v1alpha1.AzureEventGridSource), nil
}
