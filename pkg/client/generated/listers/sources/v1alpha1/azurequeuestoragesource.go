/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureQueueStorageSourceLister helps list AzureQueueStorageSources.
// All objects returned here must be treated as read-only.
type AzureQueueStorageSourceLister interface {
	// List lists all AzureQueueStorageSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureQueueStorageSource, err error)
	// AzureQueueStorageSources returns an object that can list and get AzureQueueStorageSources.
	AzureQueueStorageSources(namespace string) AzureQueueStorageSourceNamespaceLister
	AzureQueueStorageSourceListerExpansion
}

// azureQueueStorageSourceLister implements the AzureQueueStorageSourceLister interface.
type azureQueueStorageSourceLister struct {
	indexer cache.Indexer
}

// NewAzureQueueStorageSourceLister returns a new AzureQueueStorageSourceLister.
func NewAzureQueueStorageSourceLister(indexer cache.Indexer) AzureQueueStorageSourceLister {
	return &azureQueueStorageSourceLister{indexer: indexer}
}

// List lists all AzureQueueStorageSources in the indexer.
func (s *azureQueueStorageSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureQueueStorageSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureQueueStorageSource))
	})
	return ret, err
}

// AzureQueueStorageSources returns an object that can list and get AzureQueueStorageSources.
func (s *azureQueueStorageSourceLister) AzureQueueStorageSources(namespace string) AzureQueueStorageSourceNamespaceLister {
	return azureQueueStorageSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureQueueStorageSourceNamespaceLister helps list and get AzureQueueStorageSources.
// All objects returned here must be treated as read-only.
type AzureQueueStorageSourceNamespaceLister interface {
	// List lists all AzureQueueStorageSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureQueueStorageSource, err error)
	// Get retrieves the AzureQueueStorageSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzureQueueStorageSource, error)
	AzureQueueStorageSourceNamespaceListerExpansion
}

// azureQueueStorageSourceNamespaceLister implements the AzureQueueStorageSourceNamespaceLister
// interface.
type azureQueueStorageSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureQueueStorageSources in the indexer for a given namespace.
func (s azureQueueStorageSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureQueueStorageSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureQueueStorageSource))
	})
	return ret, err
}

// Get retrieves the AzureQueueStorageSource from the indexer for a given namespace and name.
func (s azureQueueStorageSourceNamespaceLister) Get(name string) (*v1alpha1.AzureQueueStorageSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azurequeuestoragesource"), name)
	}
	return obj.(*v1alpha1.AzureQueueStorageSource), nil
}
