/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureIOTHubSourceLister helps list AzureIOTHubSources.
// All objects returned here must be treated as read-only.
type AzureIOTHubSourceLister interface {
	// List lists all AzureIOTHubSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureIOTHubSource, err error)
	// AzureIOTHubSources returns an object that can list and get AzureIOTHubSources.
	AzureIOTHubSources(namespace string) AzureIOTHubSourceNamespaceLister
	AzureIOTHubSourceListerExpansion
}

// azureIOTHubSourceLister implements the AzureIOTHubSourceLister interface.
type azureIOTHubSourceLister struct {
	indexer cache.Indexer
}

// NewAzureIOTHubSourceLister returns a new AzureIOTHubSourceLister.
func NewAzureIOTHubSourceLister(indexer cache.Indexer) AzureIOTHubSourceLister {
	return &azureIOTHubSourceLister{indexer: indexer}
}

// List lists all AzureIOTHubSources in the indexer.
func (s *azureIOTHubSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureIOTHubSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureIOTHubSource))
	})
	return ret, err
}

// AzureIOTHubSources returns an object that can list and get AzureIOTHubSources.
func (s *azureIOTHubSourceLister) AzureIOTHubSources(namespace string) AzureIOTHubSourceNamespaceLister {
	return azureIOTHubSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureIOTHubSourceNamespaceLister helps list and get AzureIOTHubSources.
// All objects returned here must be treated as read-only.
type AzureIOTHubSourceNamespaceLister interface {
	// List lists all AzureIOTHubSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureIOTHubSource, err error)
	// Get retrieves the AzureIOTHubSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzureIOTHubSource, error)
	AzureIOTHubSourceNamespaceListerExpansion
}

// azureIOTHubSourceNamespaceLister implements the AzureIOTHubSourceNamespaceLister
// interface.
type azureIOTHubSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureIOTHubSources in the indexer for a given namespace.
func (s azureIOTHubSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureIOTHubSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureIOTHubSource))
	})
	return ret, err
}

// Get retrieves the AzureIOTHubSource from the indexer for a given namespace and name.
func (s azureIOTHubSourceNamespaceLister) Get(name string) (*v1alpha1.AzureIOTHubSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azureiothubsource"), name)
	}
	return obj.(*v1alpha1.AzureIOTHubSource), nil
}
