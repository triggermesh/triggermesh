/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/flow/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataWeaveTransformationLister helps list DataWeaveTransformations.
// All objects returned here must be treated as read-only.
type DataWeaveTransformationLister interface {
	// List lists all DataWeaveTransformations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataWeaveTransformation, err error)
	// DataWeaveTransformations returns an object that can list and get DataWeaveTransformations.
	DataWeaveTransformations(namespace string) DataWeaveTransformationNamespaceLister
	DataWeaveTransformationListerExpansion
}

// dataWeaveTransformationLister implements the DataWeaveTransformationLister interface.
type dataWeaveTransformationLister struct {
	indexer cache.Indexer
}

// NewDataWeaveTransformationLister returns a new DataWeaveTransformationLister.
func NewDataWeaveTransformationLister(indexer cache.Indexer) DataWeaveTransformationLister {
	return &dataWeaveTransformationLister{indexer: indexer}
}

// List lists all DataWeaveTransformations in the indexer.
func (s *dataWeaveTransformationLister) List(selector labels.Selector) (ret []*v1alpha1.DataWeaveTransformation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataWeaveTransformation))
	})
	return ret, err
}

// DataWeaveTransformations returns an object that can list and get DataWeaveTransformations.
func (s *dataWeaveTransformationLister) DataWeaveTransformations(namespace string) DataWeaveTransformationNamespaceLister {
	return dataWeaveTransformationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataWeaveTransformationNamespaceLister helps list and get DataWeaveTransformations.
// All objects returned here must be treated as read-only.
type DataWeaveTransformationNamespaceLister interface {
	// List lists all DataWeaveTransformations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataWeaveTransformation, err error)
	// Get retrieves the DataWeaveTransformation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataWeaveTransformation, error)
	DataWeaveTransformationNamespaceListerExpansion
}

// dataWeaveTransformationNamespaceLister implements the DataWeaveTransformationNamespaceLister
// interface.
type dataWeaveTransformationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataWeaveTransformations in the indexer for a given namespace.
func (s dataWeaveTransformationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataWeaveTransformation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataWeaveTransformation))
	})
	return ret, err
}

// Get retrieves the DataWeaveTransformation from the indexer for a given namespace and name.
func (s dataWeaveTransformationNamespaceLister) Get(name string) (*v1alpha1.DataWeaveTransformation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dataweavetransformation"), name)
	}
	return obj.(*v1alpha1.DataWeaveTransformation), nil
}
