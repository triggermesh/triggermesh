/*
Copyright 2021 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/flow/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// XSLTTransformLister helps list XSLTTransforms.
// All objects returned here must be treated as read-only.
type XSLTTransformLister interface {
	// List lists all XSLTTransforms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.XSLTTransform, err error)
	// XSLTTransforms returns an object that can list and get XSLTTransforms.
	XSLTTransforms(namespace string) XSLTTransformNamespaceLister
	XSLTTransformListerExpansion
}

// xSLTTransformLister implements the XSLTTransformLister interface.
type xSLTTransformLister struct {
	indexer cache.Indexer
}

// NewXSLTTransformLister returns a new XSLTTransformLister.
func NewXSLTTransformLister(indexer cache.Indexer) XSLTTransformLister {
	return &xSLTTransformLister{indexer: indexer}
}

// List lists all XSLTTransforms in the indexer.
func (s *xSLTTransformLister) List(selector labels.Selector) (ret []*v1alpha1.XSLTTransform, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.XSLTTransform))
	})
	return ret, err
}

// XSLTTransforms returns an object that can list and get XSLTTransforms.
func (s *xSLTTransformLister) XSLTTransforms(namespace string) XSLTTransformNamespaceLister {
	return xSLTTransformNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// XSLTTransformNamespaceLister helps list and get XSLTTransforms.
// All objects returned here must be treated as read-only.
type XSLTTransformNamespaceLister interface {
	// List lists all XSLTTransforms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.XSLTTransform, err error)
	// Get retrieves the XSLTTransform from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.XSLTTransform, error)
	XSLTTransformNamespaceListerExpansion
}

// xSLTTransformNamespaceLister implements the XSLTTransformNamespaceLister
// interface.
type xSLTTransformNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all XSLTTransforms in the indexer for a given namespace.
func (s xSLTTransformNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.XSLTTransform, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.XSLTTransform))
	})
	return ret, err
}

// Get retrieves the XSLTTransform from the indexer for a given namespace and name.
func (s xSLTTransformNamespaceLister) Get(name string) (*v1alpha1.XSLTTransform, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("xslttransform"), name)
	}
	return obj.(*v1alpha1.XSLTTransform), nil
}
