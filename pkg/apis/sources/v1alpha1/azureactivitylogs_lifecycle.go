/*
Copyright 2022 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/runtime/schema"

	"knative.dev/pkg/apis"
	duckv1 "knative.dev/pkg/apis/duck/v1"

	"github.com/triggermesh/triggermesh/pkg/apis/common/v1alpha1"
	"github.com/triggermesh/triggermesh/pkg/apis/sources"
)

// GetGroupVersionKind implements kmeta.OwnerRefable.
func (s *AzureActivityLogsSource) GetGroupVersionKind() schema.GroupVersionKind {
	return SchemeGroupVersion.WithKind("AzureActivityLogsSource")
}

// GetConditionSet implements duckv1.KRShaped.
func (s *AzureActivityLogsSource) GetConditionSet() apis.ConditionSet {
	return azureActivityLogsSourceConditionSet
}

// GetStatus implements duckv1.KRShaped.
func (s *AzureActivityLogsSource) GetStatus() *duckv1.Status {
	return &s.Status.Status.Status
}

// GetSink implements EventSender.
func (s *AzureActivityLogsSource) GetSink() *duckv1.Destination {
	return &s.Spec.Sink
}

// GetStatusManager implements Reconcilable.
func (s *AzureActivityLogsSource) GetStatusManager() *v1alpha1.StatusManager {
	return &v1alpha1.StatusManager{
		ConditionSet: s.GetConditionSet(),
		Status:       &s.Status.Status,
	}
}

// AsEventSource implements EventSource.
func (s *AzureActivityLogsSource) AsEventSource() string {
	subsID := &AzureResourceID{
		SubscriptionID: s.Spec.SubscriptionID,
	}
	return subsID.String()
}

// GetAdapterOverrides implements AdapterConfigurable.
func (s *AzureActivityLogsSource) GetAdapterOverrides() *v1alpha1.AdapterOverrides {
	return s.Spec.AdapterOverrides
}

// Supported event types
const (
	// https://docs.microsoft.com/en-us/azure/azure-monitor/platform/activity-log-schema
	AzureActivityLogsActivityLogEventType = "activity-log"
)

// GetEventTypes returns the event types generated by the source.
func (s *AzureActivityLogsSource) GetEventTypes() []string {
	return []string{
		AzureEventType(sources.AzureServiceMonitor, AzureActivityLogsActivityLogEventType),
	}
}

// Status conditions
const (
	// AzureActivityLogsConditionSubscribed has status True when Diagnostic Settings are successfully registered for
	// the Azure subscription.
	AzureActivityLogsConditionSubscribed apis.ConditionType = "Subscribed"
)

// azureActivityLogsSourceConditionSet is a set of conditions for
// AzureActivityLogsSource objects.
var azureActivityLogsSourceConditionSet = v1alpha1.NewConditionSet(
	AzureActivityLogsConditionSubscribed,
)

// MarkSubscribed sets the Subscribed condition to True.
func (s *AzureActivityLogsSourceStatus) MarkSubscribed() {
	azureActivityLogsSourceConditionSet.Manage(s).MarkTrue(AzureActivityLogsConditionSubscribed)
}

// MarkNotSubscribed sets the Subscribed condition to False with the given
// reason and message.
func (s *AzureActivityLogsSourceStatus) MarkNotSubscribed(reason, msg string) {
	azureActivityLogsSourceConditionSet.Manage(s).MarkFalse(AzureActivityLogsConditionSubscribed, reason, msg)
}
