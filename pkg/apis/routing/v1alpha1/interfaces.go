/*
Copyright 2021 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"

	duckv1 "knative.dev/pkg/apis/duck/v1"
	"knative.dev/pkg/kmeta"
)

// Reconcilable is implemented by all TriggerMesh components.
type Reconcilable interface {
	metav1.Object
	runtime.Object
	// OwnerRefable is used to construct a generic reconciler for each
	// component type, and convert custom objects to owner references.
	kmeta.OwnerRefable
	// KRShaped is used by generated reconcilers to perform pre and
	// post-reconcile status updates.
	duckv1.KRShaped

	// GetSink returns the component's event sink.
	GetSink() *duckv1.Destination
	// GetStatusManager returns a manager for the component's status.
	GetStatusManager() *StatusManager
	// GetEventTypes returns the event types generated by the component.
	GetEventTypes() []string
	// AsEventSource returns a unique reference to the component suitable
	// for use as a CloudEvent 'source' attribute.
	AsEventSource() string
}

// multiTenant is implemented by all multi-tenant component types.
type multiTenant interface {
	IsMultiTenant() bool
}

// IsMultiTenant returns whether the given component type is multi-tenant.
func IsMultiTenant(r Reconcilable) bool {
	mt, ok := r.(multiTenant)
	return ok && mt.IsMultiTenant()
}

type reconcilableInstanceKey struct{}

// WithReconcilable returns a copy of the parent context in which the value
// associated with the reconcilableInstanceKey is the given component instance.
func WithReconcilable(ctx context.Context, r Reconcilable) context.Context {
	return context.WithValue(ctx, reconcilableInstanceKey{}, r)
}

// ReconcilableFromContext returns the component instance stored in the context.
func ReconcilableFromContext(ctx context.Context) Reconcilable {
	if r, ok := ctx.Value(reconcilableInstanceKey{}).(Reconcilable); ok {
		return r
	}
	return nil
}
