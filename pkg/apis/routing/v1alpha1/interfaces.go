/*
Copyright (c) 2020-2021 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"

	duckv1 "knative.dev/pkg/apis/duck/v1"
	"knative.dev/pkg/kmeta"
)

// Router is implemented by all Routing types.
type Router interface {
	metav1.Object
	runtime.Object
	// OwnerRefable is used to construct a generic reconciler for each
	// router type, and convert router objects to owner references.
	kmeta.OwnerRefable
	// KRShaped is used by generated reconcilers to perform pre and
	// post-reconcile status updates.
	duckv1.KRShaped
	// GetSink returns the router's event sink.
	GetSink() *duckv1.Destination
	// GetStatusManager returns a manager for the router's status.
	GetStatusManager() *RouterStatusManager
	// GetEventTypes returns the event types generated by the router.
	GetEventTypes() []string
	// AsRouter returns a unique reference to the router suitable for
	// use as a CloudEvent router attribute.
	AsRouter() string
}

// WithRouter returns a copy of the parent context in which the value
// associated with the router key is the given router.
func WithRouter(ctx context.Context, r Router) context.Context {
	return context.WithValue(ctx, routerKey{}, r)
}

type routerKey struct{}

// RouterFromContext returns the router stored in the context.
func RouterFromContext(ctx context.Context) Router {
	if s, ok := ctx.Value(routerKey{}).(Router); ok {
		return s
	}
	return nil
}

// multiTenant is implemented by all multi-tenant router types.
type multiTenant interface {
	IsMultiTenant() bool
}

// IsMultiTenant returns whether the given router type is multi-tenant.
func IsMultiTenant(r Router) bool {
	mt, ok := r.(multiTenant)
	return ok && mt.IsMultiTenant()
}
