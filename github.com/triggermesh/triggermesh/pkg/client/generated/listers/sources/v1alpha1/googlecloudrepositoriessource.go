/*
Copyright 2021 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/triggermesh/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GoogleCloudRepositoriesSourceLister helps list GoogleCloudRepositoriesSources.
// All objects returned here must be treated as read-only.
type GoogleCloudRepositoriesSourceLister interface {
	// List lists all GoogleCloudRepositoriesSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudRepositoriesSource, err error)
	// GoogleCloudRepositoriesSources returns an object that can list and get GoogleCloudRepositoriesSources.
	GoogleCloudRepositoriesSources(namespace string) GoogleCloudRepositoriesSourceNamespaceLister
	GoogleCloudRepositoriesSourceListerExpansion
}

// googleCloudRepositoriesSourceLister implements the GoogleCloudRepositoriesSourceLister interface.
type googleCloudRepositoriesSourceLister struct {
	indexer cache.Indexer
}

// NewGoogleCloudRepositoriesSourceLister returns a new GoogleCloudRepositoriesSourceLister.
func NewGoogleCloudRepositoriesSourceLister(indexer cache.Indexer) GoogleCloudRepositoriesSourceLister {
	return &googleCloudRepositoriesSourceLister{indexer: indexer}
}

// List lists all GoogleCloudRepositoriesSources in the indexer.
func (s *googleCloudRepositoriesSourceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudRepositoriesSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudRepositoriesSource))
	})
	return ret, err
}

// GoogleCloudRepositoriesSources returns an object that can list and get GoogleCloudRepositoriesSources.
func (s *googleCloudRepositoriesSourceLister) GoogleCloudRepositoriesSources(namespace string) GoogleCloudRepositoriesSourceNamespaceLister {
	return googleCloudRepositoriesSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GoogleCloudRepositoriesSourceNamespaceLister helps list and get GoogleCloudRepositoriesSources.
// All objects returned here must be treated as read-only.
type GoogleCloudRepositoriesSourceNamespaceLister interface {
	// List lists all GoogleCloudRepositoriesSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudRepositoriesSource, err error)
	// Get retrieves the GoogleCloudRepositoriesSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GoogleCloudRepositoriesSource, error)
	GoogleCloudRepositoriesSourceNamespaceListerExpansion
}

// googleCloudRepositoriesSourceNamespaceLister implements the GoogleCloudRepositoriesSourceNamespaceLister
// interface.
type googleCloudRepositoriesSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GoogleCloudRepositoriesSources in the indexer for a given namespace.
func (s googleCloudRepositoriesSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GoogleCloudRepositoriesSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GoogleCloudRepositoriesSource))
	})
	return ret, err
}

// Get retrieves the GoogleCloudRepositoriesSource from the indexer for a given namespace and name.
func (s googleCloudRepositoriesSourceNamespaceLister) Get(name string) (*v1alpha1.GoogleCloudRepositoriesSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("googlecloudrepositoriessource"), name)
	}
	return obj.(*v1alpha1.GoogleCloudRepositoriesSource), nil
}
