version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1
  gcp-cli: circleci/gcp-cli@1
  go: circleci/go@1

jobs:
  checkout:
    executor:
      name: go/default
      tag: '1.17'
    steps:
      - checkout
      - go/mod-download-cached
      - persist_to_workspace:
          root: ~/
          paths:
            - go
            - project

  test:
    executor:
      name: go/default
      tag: '1.17'
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run fmt-test
          command: make fmt-test
      - run:
          name: Run test/cover
          command: make cover
          environment:
            TEST_OUTPUT_DIR: /tmp/test-results/
            COVER_OUTPUT_DIR: /tmp/cover-results/
      - store_test_results:
          path: /tmp/test-results/
      - store_artifacts:
          path: /tmp/cover-results/

  publish-image:
    executor:
      name: gcp-cli/google
    steps:
      - attach_workspace:
          at: ~/
      - gcp-cli/initialize
      - run:
          name: Publishing docker image
          command: IMAGE_SHA=${CIRCLE_SHA1} IMAGE_TAG=${CIRCLE_TAG:-latest} make -j6 cloudbuild
          no_output_timeout: 30m

  deploy:
    description: Patches target cluster configuration
    executor:
      name: go/default
      tag: '1.17'
    parameters:
      cluster:
        type: string
      committer_name:
        type: string
        default: TriggerMesh Bot
      committer_email:
        type: string
        default: bot@triggermesh.com
    steps:
      - attach_workspace:
          at: ~/
      - add_ssh_keys
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Configuring git
          command: |
            git config --global user.name '<< parameters.committer_name >>'
            git config --global user.email '<< parameters.committer_email >>'
      - run:
          name: Cloning config repository
          command: git clone --single-branch git@github.com:triggermesh/config.git tmconfig
      - run:
          name: Updating overlays/<< parameters.cluster >>/triggermesh-core manifests
          working_directory: tmconfig/
          command: |
            IMAGE_REPO=$(sed -n -e 's/^IMAGE_REPO[[:space:]].*=[[:space:]]*\(.*\)$/\1/p' ~/project/Makefile)
            for cmd in ~/project/cmd/*; do
              sed -i overlays/<< parameters.cluster >>/triggermesh-core/deployments.yaml \
                -e "s|gcr.io/triggermesh\(-private\)\?/${cmd##*/}:.*|${IMAGE_REPO}/${cmd##*/}:${CIRCLE_TAG:-${CIRCLE_SHA1}}|g"
            done

            sed -i overlays/<< parameters.cluster >>/triggermesh-core/kustomization.yaml \
              -e "s|github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}\(?ref=.*\)\?|github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}?ref=${CIRCLE_TAG:-${CIRCLE_SHA1}}|g"

            git --no-pager diff
      - run:
          name: Committing overlays/<< parameters.cluster >>/triggermesh-core updates
          working_directory: tmconfig/
          command: |
            git add overlays
            git commit -m "Update overlays/<< parameters.cluster >>/triggermesh-core deployments to '${CIRCLE_TAG:-${CIRCLE_SHA1}}'"
            git push origin main

  release:
    executor:
      name: go/default
      tag: '1.17'
    steps:
      - attach_workspace:
          at: ~/
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: $AWS_CLUSTER_NAME
          aws-region: $AWS_REGION
          install-kubectl: true
      - run:
          name: Building release packages
          command: IMAGE_TAG=${CIRCLE_TAG:-latest} make release-yaml
          environment:
            DIST_DIR: /tmp/dist/
      - run:
          name: Installing github-release tool
          command: go get github.com/meterup/github-release
      - run:
          name: Creating github release
          command: |
            PRE_RELEASE=${CIRCLE_TAG/${CIRCLE_TAG%-rc[0-9]*}/}
            github-release delete -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} 2>/dev/null ||:
            ./hack/release-notes.sh ${CIRCLE_TAG} | github-release release ${PRE_RELEASE:+-p} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -d -
            for f in $(find /tmp/dist -type f); do github-release upload -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -n $(basename ${f}) -f ${f} ; done

workflows:
  test-and-publish:
    jobs:
      - checkout:
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - test:
          requires:
            - checkout
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - publish-image:
          context: production
          requires:
            - test
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              only: main
      - deploy:
          name: update-staging-config
          cluster: staging
          requires:
            - publish-image
          filters:
            branches:
              only: main
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      # - deploy:
      #     name: update-production-config
      #     cluster: prod
      #     requires:
      #       - update-staging-config
      #     filters:
      #       tags:
      #         only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      #       branches:
      #         ignore: /.*/
      - release:
          context: production
          requires:
            - publish-image
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
