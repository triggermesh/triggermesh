version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1
  gcp-cli: circleci/gcp-cli@1
  go: circleci/go@1

jobs:
  gomod-cache:
    executor:
      name: go/default
      tag: '1.19.1'
    steps:
      - checkout
      - go/mod-download-cached

  test:
    executor:
      name: go/default
      tag: '1.19.1'
    steps:
      - checkout
      - go/load-cache
      - restore_cache:
          name: Restoring Go build cache
          # Multi-key caching strategy, as documented at https://circleci.com/docs/2.0/caching/.
          # All keys include the 'go.sum' checksum to ensure caches get invalidated
          # when we update either our dependencies or the Go toolchain.
          keys:
              # If a workflow gets retried, the previous run may have already
              # populated the build cache for the current revision.
              # This is the freshest cache we can get.
            - go-build-{{ arch }}-{{ checksum "go.sum" }}-{{ .Revision }}
              # Fall back to the secondary build cache.
              # Although it may not be fresh for the latest code revision, this cache
              # should at least be up-to-date for the current dependencies' versions.
            - go-build-{{ arch }}-{{ checksum "go.sum" }}
      - run:
          # XSLTTransformation needs libxml2.
          name: Install libxml2
          command: sudo apt-get update && sudo apt install -y libxml2-dev libxslt1-dev liblzma-dev zlib1g-dev
      - run:
          # DataWeaveTransformation needs dw cli
          name: Install DataWeave CLI
          command: |
            mkdir /tmp/dw
            curl -sSLO https://github.com/mulesoft-labs/data-weave-cli/releases/download/v$DW_VERSION/dw-$DW_VERSION-Linux
            unzip -p dw-$DW_VERSION-Linux 'bin/dw' > dw && chmod +x dw && mv dw $(go env GOPATH)/bin/
          environment:
            DW_VERSION: 1.0.19
      - run:
          name: Run test/cover
          command: WITH_DEPENDENCIES=true make cover
          environment:
            TEST_OUTPUT_DIR: /tmp/test-results/
            COVER_OUTPUT_DIR: /tmp/cover-results/
            DW_HOME: /tmp/dw
      - store_test_results:
          path: /tmp/test-results/
      - store_artifacts:
          path: /tmp/cover-results/
      # Running tests populates the Go build cache.
      # We save it here to allow subsequent jobs to re-use what's already been compiled.
      - save_cache:
          name: Saving primary Go build cache
          key: go-build-{{ arch }}-{{ checksum "go.sum" }}-{{ .Revision }}
          paths:
            - ~/.cache/go-build
      - save_cache:
          name: Saving secondary Go build cache
          key: go-build-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build

  gen-apidocs:
    executor:
      name: go/default
      tag: '1.19.1'
    parameters:
      committer_name:
        type: string
        default: TriggerMesh Bot
      committer_email:
        type: string
        default: bot@triggermesh.com
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "aa:03:46:c4:da:eb:da:02:ad:c0:3a:bc:5f:62:02:9c"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Configuring git
          command: |
            git config --global user.name '<< parameters.committer_name >>'
            git config --global user.email '<< parameters.committer_email >>'
      - run:
          name: Cloning docs repository
          command: git clone --single-branch git@github.com:triggermesh/docs.git tm-docs
      - run:
          name: Run gen-apidocs
          command:  TRIGGERMESH_COMMIT=${CIRCLE_TAG:-$CIRCLE_SHA1} make gen-apidocs
          environment:
            DOCS_OUTPUT_DIR: ~/project/tm-docs/docs/apis/
      - run:
          name: Committing updates to triggermesh/docs
          working_directory: tm-docs/
          command: |
            if ! git diff --exit-code --quiet; then
              git --no-pager diff
              git add docs/
              git commit -m "Generated with gen-crd-api-reference-docs on git commit ${CIRCLE_TAG:-${CIRCLE_SHA1}}"
              git push origin main
            fi

  publish-image:
    executor:
      name: go/default
      tag: '1.19.1'
    resource_class: xlarge
    steps:
      - checkout
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: Adding Docker credHelpers for GCR
          command: gcloud auth configure-docker
      - go/load-cache
      - restore_cache:
          name: Restoring Go build cache
          keys:
            - go-build-{{ arch }}-{{ checksum "go.sum" }}-{{ .Revision }}
            - go-build-{{ arch }}-{{ checksum "go.sum" }}
      - run:
          name: Installing ko
          command: go install github.com/google/ko@v0.11.2
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - run:
          name: Publishing container images and creating release manifests
          environment:
            KO_DOCKER_REPO: gcr.io/triggermesh
            KOFLAGS: --jobs=4  # adjust based on resource_class
            DIST_DIR: /tmp/dist/
          command: |
            pushd hack/manifest-cleaner
            go install .
            popd

            IMAGE_TAG=${CIRCLE_TAG:-${CIRCLE_SHA1}} make release

            declare -a release_files=(
              triggermesh-crds.yaml
              triggermesh.yaml
            )

            for f in "${release_files[@]}"; do
              manifest-cleaner <"${DIST_DIR}/${f}" >"${DIST_DIR}/${f}.clean"
              mv "${DIST_DIR}/${f}.clean" "${DIST_DIR}/${f}"
            done
      - persist_to_workspace:
          root: /tmp/
          paths:
            - dist/
      - store_artifacts:
          path: /tmp/dist/

  trigger-e2e-test:
    executor:
      name: go/default
      tag: '1.19.1'
    steps:
      - run:
          name: Sending dispatch event
          command: |
            curl \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              https://api.github.com/repos/triggermesh/triggermesh/dispatches \
              -d '{"event_type":"e2e-test","client_payload":{"commit_sha":"'${CIRCLE_SHA1}'"}}'

  update-manifests:
    description: Patches target cluster configuration
    executor:
      name: go/default
      tag: '1.19.1'
    parameters:
      cluster:
        type: string
      committer_name:
        type: string
        default: TriggerMesh Bot
      committer_email:
        type: string
        default: bot@triggermesh.com
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "07:8f:e8:44:ce:54:16:26:00:98:e5:1c:a6:c6:00:34"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Configuring git
          command: |
            git config --global user.name '<< parameters.committer_name >>'
            git config --global user.email '<< parameters.committer_email >>'
      - run:
          name: Cloning config repository
          command: git clone --single-branch git@github.com:triggermesh/config.git tm-config
      - run:
          name: Updating overlays/<< parameters.cluster >>/triggermesh-core manifests
          working_directory: tm-config/
          environment:
            IMAGE_REPO: gcr.io/triggermesh
          command: |
            for cmd in ~/project/cmd/*; do
              sed -i overlays/<< parameters.cluster >>/triggermesh-core/deployments.yaml \
                -e "s|gcr.io/triggermesh\(-private\)\?/${cmd##*/}:.*|${IMAGE_REPO}/${cmd##*/}:${CIRCLE_TAG:-${CIRCLE_SHA1}}|g"
            done

            sed -i overlays/<< parameters.cluster >>/triggermesh-core/kustomization.yaml \
              -e "s|github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}\(?ref=.*\)\?|github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}?ref=${CIRCLE_TAG:-${CIRCLE_SHA1}}|g"

            git --no-pager diff
      - run:
          name: Committing overlays/<< parameters.cluster >>/triggermesh-core updates
          working_directory: tm-config/
          command: |
            if ! git diff --exit-code --quiet; then
              git add overlays
              git commit -m "Update overlays/<< parameters.cluster >>/triggermesh-core deployments to '${CIRCLE_TAG:-${CIRCLE_SHA1}}'"
              git push origin main
            fi

  release:
    executor:
      name: go/default
      tag: '1.19.1'
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: $AWS_CLUSTER_NAME
          aws-region: $AWS_REGION
          install-kubectl: true
      - run:
          name: Installing github-release tool
          command: go install github.com/meterup/github-release@latest
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Creating GitHub release
          command: |
            PRE_RELEASE=${CIRCLE_TAG/${CIRCLE_TAG%-rc[0-9]*}/}
            github-release delete -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} 2>/dev/null ||:
            ./hack/release-notes.sh ${CIRCLE_TAG} | github-release release ${PRE_RELEASE:+-p} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -d -

            # wait for github to report the release before attaching the artifacts
            max_tries=5
            for _ in $(seq 1 ${max_tries}); do
              github-release info -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} >/dev/null && break
              sleep 1
            done

            for f in $(find /tmp/workspace/dist/ -type f); do
              github-release upload -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -n $(basename ${f}) -f ${f}
            done
      - run:
          name: Installing packer
          command: |
            curl -sSLO https://releases.hashicorp.com/packer/1.7.6/packer_1.7.6_linux_amd64.zip
            unzip packer_1.7.6_linux_amd64.zip -d $(go env GOPATH)/bin/
      - run:
          name: Building and publishing VM images
          command: TRIGGERMESH_VERSION=${CIRCLE_TAG:-${CIRCLE_SHA1:0:5}} make vm-images
          environment:
            AWS_AMI_GROUPS: all
            AWS_AMI_REGIONS: us-east-1,us-east-2,us-west-1,us-west-2,ap-southeast-1,ap-southeast-2,ap-northeast-1,eu-central-1,eu-west-1,eu-west-2
          no_output_timeout: 45m

workflows:
  test-and-publish:
    jobs:
      - gomod-cache:
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - test:
          requires:
            - gomod-cache
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - gen-apidocs:
          requires:
            - test
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              only: main
      - publish-image:
          context: production
          requires:
            - gen-apidocs
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              only: main
      - trigger-e2e-test:
          context: production
          requires:
            - publish-image
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              only: main
      - update-manifests:
          name: update-staging-config
          cluster: staging
          requires:
            - publish-image
          filters:
            branches:
              only: main
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - update-manifests:
          name: update-production-config
          cluster: prod
          requires:
            - update-staging-config
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
      - release:
          context: production
          requires:
            - publish-image
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
